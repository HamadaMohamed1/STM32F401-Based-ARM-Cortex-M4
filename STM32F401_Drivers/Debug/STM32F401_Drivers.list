
STM32F401_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f30  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080010c4  080010c4  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080010c4  080010c4  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  080010c4  080010c4  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010c4  080010c4  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010c4  080010c4  000110c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010c8  080010c8  000110c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  080010cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000040  0800110c  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  0800110c  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002006a  2**0
                  CONTENTS, READONLY
 13 .debug_info   000025e4  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000aab  00000000  00000000  00022691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000230  00000000  00000000  00023140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000180  00000000  00000000  00023370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000187d  00000000  00000000  000234f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000038a3  00000000  00000000  00024d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00006b2c  00000000  00000000  00028610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000670  00000000  00000000  0002f13c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0002f7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000040 	.word	0x20000040
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080010ac 	.word	0x080010ac

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000044 	.word	0x20000044
 80001d0:	080010ac 	.word	0x080010ac

080001d4 <nvic_set_pending_flag>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t nvic_set_pending_flag(IRQn_Type IRQNum)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
	Std_RetType_t ret = RET_OK;
 80001de:	2300      	movs	r3, #0
 80001e0:	73fb      	strb	r3, [r7, #15]
	uint8_t l_Reg_num ;
	uint8_t l_Bit_num ;
	if(IRQNum > SPI4_IRQn)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	2b54      	cmp	r3, #84	; 0x54
 80001e8:	dd02      	ble.n	80001f0 <nvic_set_pending_flag+0x1c>
	{
		ret = RET_ERROR;
 80001ea:	2301      	movs	r3, #1
 80001ec:	73fb      	strb	r3, [r7, #15]
 80001ee:	e01b      	b.n	8000228 <nvic_set_pending_flag+0x54>
	}
	else
	{
		l_Reg_num = (IRQNum / 32);
 80001f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	da00      	bge.n	80001fa <nvic_set_pending_flag+0x26>
 80001f8:	331f      	adds	r3, #31
 80001fa:	115b      	asrs	r3, r3, #5
 80001fc:	b25b      	sxtb	r3, r3
 80001fe:	73bb      	strb	r3, [r7, #14]
		l_Bit_num = (IRQNum % 32);
 8000200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000204:	425a      	negs	r2, r3
 8000206:	f003 031f 	and.w	r3, r3, #31
 800020a:	f002 021f 	and.w	r2, r2, #31
 800020e:	bf58      	it	pl
 8000210:	4253      	negpl	r3, r2
 8000212:	b25b      	sxtb	r3, r3
 8000214:	737b      	strb	r3, [r7, #13]
		NVIC->ISPR[l_Reg_num] = (1<<l_Bit_num);
 8000216:	7b7b      	ldrb	r3, [r7, #13]
 8000218:	2201      	movs	r2, #1
 800021a:	fa02 f103 	lsl.w	r1, r2, r3
 800021e:	4a05      	ldr	r2, [pc, #20]	; (8000234 <nvic_set_pending_flag+0x60>)
 8000220:	7bbb      	ldrb	r3, [r7, #14]
 8000222:	3340      	adds	r3, #64	; 0x40
 8000224:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	return ret;
 8000228:	7bfb      	ldrb	r3, [r7, #15]
}
 800022a:	4618      	mov	r0, r3
 800022c:	3714      	adds	r7, #20
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	e000e100 	.word	0xe000e100

08000238 <scb_set_priority_group>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t scb_set_priority_group(uint32_t priority_group)
{
 8000238:	b480      	push	{r7}
 800023a:	b085      	sub	sp, #20
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
	Std_RetType_t ret = RET_OK ;
 8000240:	2300      	movs	r3, #0
 8000242:	73fb      	strb	r3, [r7, #15]
	if((GROUP_PRIORITIES_8_SUB_PRIORITIES_2==priority_group)||(GROUP_PRIORITIES_4_SUB_PRIORITIES_4==priority_group)||(GROUP_PRIORITIES_2_SUB_PRIORITIES_8==priority_group)||(GROUP_PRIORITIES_1_SUB_PRIORITIES_16==priority_group))
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	4a0e      	ldr	r2, [pc, #56]	; (8000280 <scb_set_priority_group+0x48>)
 8000248:	4293      	cmp	r3, r2
 800024a:	d00b      	beq.n	8000264 <scb_set_priority_group+0x2c>
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4a0d      	ldr	r2, [pc, #52]	; (8000284 <scb_set_priority_group+0x4c>)
 8000250:	4293      	cmp	r3, r2
 8000252:	d007      	beq.n	8000264 <scb_set_priority_group+0x2c>
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	4a0c      	ldr	r2, [pc, #48]	; (8000288 <scb_set_priority_group+0x50>)
 8000258:	4293      	cmp	r3, r2
 800025a:	d003      	beq.n	8000264 <scb_set_priority_group+0x2c>
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	4a0b      	ldr	r2, [pc, #44]	; (800028c <scb_set_priority_group+0x54>)
 8000260:	4293      	cmp	r3, r2
 8000262:	d104      	bne.n	800026e <scb_set_priority_group+0x36>
	{
		SCB->AIRCR = priority_group;
 8000264:	4a0a      	ldr	r2, [pc, #40]	; (8000290 <scb_set_priority_group+0x58>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f8c2 3d04 	str.w	r3, [r2, #3332]	; 0xd04
 800026c:	e001      	b.n	8000272 <scb_set_priority_group+0x3a>
	}
	else
	{
		ret = RET_ERROR;
 800026e:	2301      	movs	r3, #1
 8000270:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8000272:	7bfb      	ldrb	r3, [r7, #15]
}
 8000274:	4618      	mov	r0, r3
 8000276:	3714      	adds	r7, #20
 8000278:	46bd      	mov	sp, r7
 800027a:	bc80      	pop	{r7}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	05fa0400 	.word	0x05fa0400
 8000284:	05fa0500 	.word	0x05fa0500
 8000288:	05fa0600 	.word	0x05fa0600
 800028c:	05fa0700 	.word	0x05fa0700
 8000290:	e000e008 	.word	0xe000e008

08000294 <Systick_init>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t Systick_init(void)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
	uint32_t NO_Tick = 0x00ffffff;
 800029a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800029e:	603b      	str	r3, [r7, #0]
	Std_RetType_t ret = RET_OK;
 80002a0:	2300      	movs	r3, #0
 80002a2:	71fb      	strb	r3, [r7, #7]
	if(NO_Tick > (STSTICK_LOAD_VALUE_POS << STSTICK_LOAD_VALUE_ACCESS)) /*resolution = 2^n = 2^24 = 16,777,216 = 1<<24*/
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80002aa:	d902      	bls.n	80002b2 <Systick_init+0x1e>
	{
		ret = RET_ERROR;
 80002ac:	2301      	movs	r3, #1
 80002ae:	71fb      	strb	r3, [r7, #7]
 80002b0:	e011      	b.n	80002d6 <Systick_init+0x42>
	}
	else
	{
		/*Disable the SYSTICK counter*/
		SYSTICK->CSR &=~ (SYSTICK_CSR_ENABLE_MASK << SYSTICK_CSR_ENABLE_POS);
 80002b2:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <Systick_init+0x50>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a0b      	ldr	r2, [pc, #44]	; (80002e4 <Systick_init+0x50>)
 80002b8:	f023 0301 	bic.w	r3, r3, #1
 80002bc:	6013      	str	r3, [r2, #0]
		/*load the value into SYST_CVR in the range 0x00000001-0x00FFFFFF*/
		SYSTICK->RVR = NO_Tick;
 80002be:	4a09      	ldr	r2, [pc, #36]	; (80002e4 <Systick_init+0x50>)
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	6053      	str	r3, [r2, #4]
		/*clear the SYSTICK counter value*/
		SYSTICK->CVR = 0;
 80002c4:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <Systick_init+0x50>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
		/*Indicates the clock source: (0) = external clock , (1) = processor clock*/
#if SYSTICK_CLOCK_SOURCE==SYSTICK_CLOCK_SOURCE_DIV_1
		SYSTICK->CSR |= (SYSTICK_CSR_CLOCK_MASK<<SYSTICK_CSR_CLOCK_POS);
 80002ca:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <Systick_init+0x50>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a05      	ldr	r2, [pc, #20]	; (80002e4 <Systick_init+0x50>)
 80002d0:	f043 0304 	orr.w	r3, r3, #4
 80002d4:	6013      	str	r3, [r2, #0]
#elif SYSTICK_CLOCK_SOURCE==SYSTICK_CLOCK_SOURCE_DIV_8
		SYSTICK->CSR &=~(SYSTICK_CSR_CLOCK_MASK<<SYSTICK_CSR_CLOCK_POS);
#else
#endif
	}
	return ret;
 80002d6:	79fb      	ldrb	r3, [r7, #7]
}
 80002d8:	4618      	mov	r0, r3
 80002da:	370c      	adds	r7, #12
 80002dc:	46bd      	mov	sp, r7
 80002de:	bc80      	pop	{r7}
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	e000e010 	.word	0xe000e010

080002e8 <Systick_Wait_Blocking>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t Systick_Wait_Blocking(uint32_t NO_Tick)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	Std_RetType_t ret = RET_OK;
 80002f0:	2300      	movs	r3, #0
 80002f2:	73fb      	strb	r3, [r7, #15]
	if(NO_Tick > (STSTICK_LOAD_VALUE_POS << STSTICK_LOAD_VALUE_ACCESS)) /*resolution = 2^n = 2^24 = 16,777,216 = 1<<24*/
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80002fa:	d902      	bls.n	8000302 <Systick_Wait_Blocking+0x1a>
	{
		ret = RET_ERROR;
 80002fc:	2301      	movs	r3, #1
 80002fe:	73fb      	strb	r3, [r7, #15]
 8000300:	e012      	b.n	8000328 <Systick_Wait_Blocking+0x40>
	}
	else
	{
		/*load the value into SYST_CVR in the range 0x00000001-0x00FFFFFF*/
		SYSTICK->RVR = NO_Tick;
 8000302:	4a0c      	ldr	r2, [pc, #48]	; (8000334 <Systick_Wait_Blocking+0x4c>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	6053      	str	r3, [r2, #4]
		/*Enable the SYSTICK counter*/
		SYSTICK->CSR |= (SYSTICK_CSR_ENABLE_MASK << SYSTICK_CSR_ENABLE_POS);
 8000308:	4b0a      	ldr	r3, [pc, #40]	; (8000334 <Systick_Wait_Blocking+0x4c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a09      	ldr	r2, [pc, #36]	; (8000334 <Systick_Wait_Blocking+0x4c>)
 800030e:	f043 0301 	orr.w	r3, r3, #1
 8000312:	6013      	str	r3, [r2, #0]
		/*COUNTFLAG Returns 1 if timer counted to 0 since last time this was read*/
		while((SYSTICK->CSR &(SYSTICK_CSR_COUNTFLAG_MASK<<SYSTICK_CSR_COUNTFLAG_POS)) == 0);
 8000314:	bf00      	nop
 8000316:	4b07      	ldr	r3, [pc, #28]	; (8000334 <Systick_Wait_Blocking+0x4c>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800031e:	2b00      	cmp	r3, #0
 8000320:	d0f9      	beq.n	8000316 <Systick_Wait_Blocking+0x2e>
		/*clear the SYSTICK counter value*/
		SYSTICK->CVR = 0;
 8000322:	4b04      	ldr	r3, [pc, #16]	; (8000334 <Systick_Wait_Blocking+0x4c>)
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
	}
	return ret;
 8000328:	7bfb      	ldrb	r3, [r7, #15]
}
 800032a:	4618      	mov	r0, r3
 800032c:	3714      	adds	r7, #20
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	e000e010 	.word	0xe000e010

08000338 <delay_ms>:
 * @param  : (ms) : number of Millie seconds
 * @return :
 *
 */
void delay_ms(uint32_t ms)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
	if(ms > 0)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d00c      	beq.n	8000360 <delay_ms+0x28>
	{
		uint32_t number_of_ms = ms;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	60fb      	str	r3, [r7, #12]
		while(number_of_ms > 0)
 800034a:	e006      	b.n	800035a <delay_ms+0x22>
		{
			Systick_Wait_Blocking(0x4189);	/*0x4189 = 1ms*/
 800034c:	f244 1089 	movw	r0, #16777	; 0x4189
 8000350:	f7ff ffca 	bl	80002e8 <Systick_Wait_Blocking>
			number_of_ms--;
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	3b01      	subs	r3, #1
 8000358:	60fb      	str	r3, [r7, #12]
		while(number_of_ms > 0)
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d1f5      	bne.n	800034c <delay_ms+0x14>
		}
	}
}
 8000360:	bf00      	nop
 8000362:	3710      	adds	r7, #16
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}

08000368 <EXTI_clear_pending_flag>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t EXTI_clear_pending_flag(EXTI_source_t EXTI_source)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	71fb      	strb	r3, [r7, #7]
	// clearing pending flag is done by programming the bit to '1'
	EXTI->PR |= (1 << EXTI_source);
 8000372:	4b08      	ldr	r3, [pc, #32]	; (8000394 <EXTI_clear_pending_flag+0x2c>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	79fa      	ldrb	r2, [r7, #7]
 8000378:	2101      	movs	r1, #1
 800037a:	fa01 f202 	lsl.w	r2, r1, r2
 800037e:	4611      	mov	r1, r2
 8000380:	4a04      	ldr	r2, [pc, #16]	; (8000394 <EXTI_clear_pending_flag+0x2c>)
 8000382:	430b      	orrs	r3, r1
 8000384:	6153      	str	r3, [r2, #20]
	return RET_OK;
 8000386:	2300      	movs	r3, #0
}
 8000388:	4618      	mov	r0, r3
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	40013c00 	.word	0x40013c00

08000398 <EXTI_read_pending_flag>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t EXTI_read_pending_flag(EXTI_source_t EXTI_source, pending_flag_t* pending_flag)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	6039      	str	r1, [r7, #0]
 80003a2:	71fb      	strb	r3, [r7, #7]

	*pending_flag = EXTI->PR & (1 << EXTI_source) ? INT_TRIGGERED : INT_NOT_TRIGGERED;
 80003a4:	4b0a      	ldr	r3, [pc, #40]	; (80003d0 <EXTI_read_pending_flag+0x38>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	79fa      	ldrb	r2, [r7, #7]
 80003aa:	2101      	movs	r1, #1
 80003ac:	fa01 f202 	lsl.w	r2, r1, r2
 80003b0:	4013      	ands	r3, r2
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	bf14      	ite	ne
 80003b6:	2301      	movne	r3, #1
 80003b8:	2300      	moveq	r3, #0
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	461a      	mov	r2, r3
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	701a      	strb	r2, [r3, #0]
	return RET_OK;
 80003c2:	2300      	movs	r3, #0
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	40013c00 	.word	0x40013c00

080003d4 <EXTI0_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI0_IRQHandler(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 80003d8:	4b0a      	ldr	r3, [pc, #40]	; (8000404 <EXTI0_IRQHandler+0x30>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	4618      	mov	r0, r3
 80003de:	f7ff ffc3 	bl	8000368 <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 80003e2:	4b08      	ldr	r3, [pc, #32]	; (8000404 <EXTI0_IRQHandler+0x30>)
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	461a      	mov	r2, r3
 80003e8:	4b07      	ldr	r3, [pc, #28]	; (8000408 <EXTI0_IRQHandler+0x34>)
 80003ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d006      	beq.n	8000400 <EXTI0_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 80003f2:	4b04      	ldr	r3, [pc, #16]	; (8000404 <EXTI0_IRQHandler+0x30>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	461a      	mov	r2, r3
 80003f8:	4b03      	ldr	r3, [pc, #12]	; (8000408 <EXTI0_IRQHandler+0x34>)
 80003fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003fe:	4798      	blx	r3
	}
}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}
 8000404:	200000b8 	.word	0x200000b8
 8000408:	2000005c 	.word	0x2000005c

0800040c <EXTI1_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI1_IRQHandler(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 8000410:	4b0a      	ldr	r3, [pc, #40]	; (800043c <EXTI1_IRQHandler+0x30>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	4618      	mov	r0, r3
 8000416:	f7ff ffa7 	bl	8000368 <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 800041a:	4b08      	ldr	r3, [pc, #32]	; (800043c <EXTI1_IRQHandler+0x30>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	461a      	mov	r2, r3
 8000420:	4b07      	ldr	r3, [pc, #28]	; (8000440 <EXTI1_IRQHandler+0x34>)
 8000422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d006      	beq.n	8000438 <EXTI1_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 800042a:	4b04      	ldr	r3, [pc, #16]	; (800043c <EXTI1_IRQHandler+0x30>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	461a      	mov	r2, r3
 8000430:	4b03      	ldr	r3, [pc, #12]	; (8000440 <EXTI1_IRQHandler+0x34>)
 8000432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000436:	4798      	blx	r3
	}
}
 8000438:	bf00      	nop
 800043a:	bd80      	pop	{r7, pc}
 800043c:	200000b8 	.word	0x200000b8
 8000440:	2000005c 	.word	0x2000005c

08000444 <EXTI2_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI2_IRQHandler(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <EXTI2_IRQHandler+0x30>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff ff8b 	bl	8000368 <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <EXTI2_IRQHandler+0x30>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	461a      	mov	r2, r3
 8000458:	4b07      	ldr	r3, [pc, #28]	; (8000478 <EXTI2_IRQHandler+0x34>)
 800045a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d006      	beq.n	8000470 <EXTI2_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 8000462:	4b04      	ldr	r3, [pc, #16]	; (8000474 <EXTI2_IRQHandler+0x30>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	461a      	mov	r2, r3
 8000468:	4b03      	ldr	r3, [pc, #12]	; (8000478 <EXTI2_IRQHandler+0x34>)
 800046a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800046e:	4798      	blx	r3
	}
}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	200000b8 	.word	0x200000b8
 8000478:	2000005c 	.word	0x2000005c

0800047c <EXTI3_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI3_IRQHandler(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 8000480:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <EXTI3_IRQHandler+0x30>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff ff6f 	bl	8000368 <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <EXTI3_IRQHandler+0x30>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	461a      	mov	r2, r3
 8000490:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <EXTI3_IRQHandler+0x34>)
 8000492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d006      	beq.n	80004a8 <EXTI3_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 800049a:	4b04      	ldr	r3, [pc, #16]	; (80004ac <EXTI3_IRQHandler+0x30>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	461a      	mov	r2, r3
 80004a0:	4b03      	ldr	r3, [pc, #12]	; (80004b0 <EXTI3_IRQHandler+0x34>)
 80004a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004a6:	4798      	blx	r3
	}
}
 80004a8:	bf00      	nop
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	200000b8 	.word	0x200000b8
 80004b0:	2000005c 	.word	0x2000005c

080004b4 <EXTI4_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI4_IRQHandler(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 80004b8:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <EXTI4_IRQHandler+0x30>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	4618      	mov	r0, r3
 80004be:	f7ff ff53 	bl	8000368 <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 80004c2:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <EXTI4_IRQHandler+0x30>)
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	461a      	mov	r2, r3
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <EXTI4_IRQHandler+0x34>)
 80004ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d006      	beq.n	80004e0 <EXTI4_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 80004d2:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <EXTI4_IRQHandler+0x30>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	461a      	mov	r2, r3
 80004d8:	4b03      	ldr	r3, [pc, #12]	; (80004e8 <EXTI4_IRQHandler+0x34>)
 80004da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004de:	4798      	blx	r3
	}
}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	200000b8 	.word	0x200000b8
 80004e8:	2000005c 	.word	0x2000005c

080004ec <EXTI9_5_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI9_5_IRQHandler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
	pending_flag_t flag = INT_NOT_TRIGGERED;
 80004f2:	2300      	movs	r3, #0
 80004f4:	71fb      	strb	r3, [r7, #7]
	EXTI_read_pending_flag(EXTI_5 , &flag);
 80004f6:	1dfb      	adds	r3, r7, #7
 80004f8:	4619      	mov	r1, r3
 80004fa:	2005      	movs	r0, #5
 80004fc:	f7ff ff4c 	bl	8000398 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	2b01      	cmp	r3, #1
 8000504:	d113      	bne.n	800052e <EXTI9_5_IRQHandler+0x42>
	{
		EXTI_clear_pending_flag(EXTI_5);
 8000506:	2005      	movs	r0, #5
 8000508:	f7ff ff2e 	bl	8000368 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 800050c:	4b42      	ldr	r3, [pc, #264]	; (8000618 <EXTI9_5_IRQHandler+0x12c>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	461a      	mov	r2, r3
 8000512:	4b42      	ldr	r3, [pc, #264]	; (800061c <EXTI9_5_IRQHandler+0x130>)
 8000514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d006      	beq.n	800052a <EXTI9_5_IRQHandler+0x3e>
		{
			EXTI_Handler[EXTI_source]();
 800051c:	4b3e      	ldr	r3, [pc, #248]	; (8000618 <EXTI9_5_IRQHandler+0x12c>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	461a      	mov	r2, r3
 8000522:	4b3e      	ldr	r3, [pc, #248]	; (800061c <EXTI9_5_IRQHandler+0x130>)
 8000524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000528:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 800052a:	2300      	movs	r3, #0
 800052c:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_6 , &flag);
 800052e:	1dfb      	adds	r3, r7, #7
 8000530:	4619      	mov	r1, r3
 8000532:	2006      	movs	r0, #6
 8000534:	f7ff ff30 	bl	8000398 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	2b01      	cmp	r3, #1
 800053c:	d113      	bne.n	8000566 <EXTI9_5_IRQHandler+0x7a>
	{
		EXTI_clear_pending_flag(EXTI_6);
 800053e:	2006      	movs	r0, #6
 8000540:	f7ff ff12 	bl	8000368 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 8000544:	4b34      	ldr	r3, [pc, #208]	; (8000618 <EXTI9_5_IRQHandler+0x12c>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	461a      	mov	r2, r3
 800054a:	4b34      	ldr	r3, [pc, #208]	; (800061c <EXTI9_5_IRQHandler+0x130>)
 800054c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d006      	beq.n	8000562 <EXTI9_5_IRQHandler+0x76>
		{
			EXTI_Handler[EXTI_source]();
 8000554:	4b30      	ldr	r3, [pc, #192]	; (8000618 <EXTI9_5_IRQHandler+0x12c>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	461a      	mov	r2, r3
 800055a:	4b30      	ldr	r3, [pc, #192]	; (800061c <EXTI9_5_IRQHandler+0x130>)
 800055c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000560:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 8000562:	2300      	movs	r3, #0
 8000564:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_7 , &flag);
 8000566:	1dfb      	adds	r3, r7, #7
 8000568:	4619      	mov	r1, r3
 800056a:	2007      	movs	r0, #7
 800056c:	f7ff ff14 	bl	8000398 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d113      	bne.n	800059e <EXTI9_5_IRQHandler+0xb2>
	{
		EXTI_clear_pending_flag(EXTI_7);
 8000576:	2007      	movs	r0, #7
 8000578:	f7ff fef6 	bl	8000368 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 800057c:	4b26      	ldr	r3, [pc, #152]	; (8000618 <EXTI9_5_IRQHandler+0x12c>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	461a      	mov	r2, r3
 8000582:	4b26      	ldr	r3, [pc, #152]	; (800061c <EXTI9_5_IRQHandler+0x130>)
 8000584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d006      	beq.n	800059a <EXTI9_5_IRQHandler+0xae>
		{
			EXTI_Handler[EXTI_source]();
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <EXTI9_5_IRQHandler+0x12c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	461a      	mov	r2, r3
 8000592:	4b22      	ldr	r3, [pc, #136]	; (800061c <EXTI9_5_IRQHandler+0x130>)
 8000594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000598:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 800059a:	2300      	movs	r3, #0
 800059c:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_8 , &flag);
 800059e:	1dfb      	adds	r3, r7, #7
 80005a0:	4619      	mov	r1, r3
 80005a2:	2008      	movs	r0, #8
 80005a4:	f7ff fef8 	bl	8000398 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d113      	bne.n	80005d6 <EXTI9_5_IRQHandler+0xea>
	{
		EXTI_clear_pending_flag(EXTI_8);
 80005ae:	2008      	movs	r0, #8
 80005b0:	f7ff feda 	bl	8000368 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 80005b4:	4b18      	ldr	r3, [pc, #96]	; (8000618 <EXTI9_5_IRQHandler+0x12c>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b18      	ldr	r3, [pc, #96]	; (800061c <EXTI9_5_IRQHandler+0x130>)
 80005bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d006      	beq.n	80005d2 <EXTI9_5_IRQHandler+0xe6>
		{
			EXTI_Handler[EXTI_source]();
 80005c4:	4b14      	ldr	r3, [pc, #80]	; (8000618 <EXTI9_5_IRQHandler+0x12c>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	461a      	mov	r2, r3
 80005ca:	4b14      	ldr	r3, [pc, #80]	; (800061c <EXTI9_5_IRQHandler+0x130>)
 80005cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005d0:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 80005d2:	2300      	movs	r3, #0
 80005d4:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_9 , &flag);
 80005d6:	1dfb      	adds	r3, r7, #7
 80005d8:	4619      	mov	r1, r3
 80005da:	2009      	movs	r0, #9
 80005dc:	f7ff fedc 	bl	8000398 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d113      	bne.n	800060e <EXTI9_5_IRQHandler+0x122>
	{
		EXTI_clear_pending_flag(EXTI_9);
 80005e6:	2009      	movs	r0, #9
 80005e8:	f7ff febe 	bl	8000368 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <EXTI9_5_IRQHandler+0x12c>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <EXTI9_5_IRQHandler+0x130>)
 80005f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d006      	beq.n	800060a <EXTI9_5_IRQHandler+0x11e>
		{
			EXTI_Handler[EXTI_source]();
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <EXTI9_5_IRQHandler+0x12c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	461a      	mov	r2, r3
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <EXTI9_5_IRQHandler+0x130>)
 8000604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000608:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 800060a:	2300      	movs	r3, #0
 800060c:	71fb      	strb	r3, [r7, #7]
	}
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200000b8 	.word	0x200000b8
 800061c:	2000005c 	.word	0x2000005c

08000620 <EXTI15_10_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI15_10_IRQHandler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
	pending_flag_t flag = INT_NOT_TRIGGERED;
 8000626:	2300      	movs	r3, #0
 8000628:	71fb      	strb	r3, [r7, #7]
	EXTI_read_pending_flag(EXTI_10 , &flag);
 800062a:	1dfb      	adds	r3, r7, #7
 800062c:	4619      	mov	r1, r3
 800062e:	200a      	movs	r0, #10
 8000630:	f7ff feb2 	bl	8000398 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d113      	bne.n	8000662 <EXTI15_10_IRQHandler+0x42>
	{
		EXTI_clear_pending_flag(EXTI_10);
 800063a:	200a      	movs	r0, #10
 800063c:	f7ff fe94 	bl	8000368 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 8000640:	4b50      	ldr	r3, [pc, #320]	; (8000784 <EXTI15_10_IRQHandler+0x164>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	461a      	mov	r2, r3
 8000646:	4b50      	ldr	r3, [pc, #320]	; (8000788 <EXTI15_10_IRQHandler+0x168>)
 8000648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d006      	beq.n	800065e <EXTI15_10_IRQHandler+0x3e>
		{
			EXTI_Handler[EXTI_source]();
 8000650:	4b4c      	ldr	r3, [pc, #304]	; (8000784 <EXTI15_10_IRQHandler+0x164>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	461a      	mov	r2, r3
 8000656:	4b4c      	ldr	r3, [pc, #304]	; (8000788 <EXTI15_10_IRQHandler+0x168>)
 8000658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800065c:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 800065e:	2300      	movs	r3, #0
 8000660:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_11 , &flag);
 8000662:	1dfb      	adds	r3, r7, #7
 8000664:	4619      	mov	r1, r3
 8000666:	200b      	movs	r0, #11
 8000668:	f7ff fe96 	bl	8000398 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d113      	bne.n	800069a <EXTI15_10_IRQHandler+0x7a>
	{
		EXTI_clear_pending_flag(EXTI_11);
 8000672:	200b      	movs	r0, #11
 8000674:	f7ff fe78 	bl	8000368 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 8000678:	4b42      	ldr	r3, [pc, #264]	; (8000784 <EXTI15_10_IRQHandler+0x164>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	461a      	mov	r2, r3
 800067e:	4b42      	ldr	r3, [pc, #264]	; (8000788 <EXTI15_10_IRQHandler+0x168>)
 8000680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d006      	beq.n	8000696 <EXTI15_10_IRQHandler+0x76>
		{
			EXTI_Handler[EXTI_source]();
 8000688:	4b3e      	ldr	r3, [pc, #248]	; (8000784 <EXTI15_10_IRQHandler+0x164>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	4b3e      	ldr	r3, [pc, #248]	; (8000788 <EXTI15_10_IRQHandler+0x168>)
 8000690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000694:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 8000696:	2300      	movs	r3, #0
 8000698:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_12 , &flag);
 800069a:	1dfb      	adds	r3, r7, #7
 800069c:	4619      	mov	r1, r3
 800069e:	200c      	movs	r0, #12
 80006a0:	f7ff fe7a 	bl	8000398 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d113      	bne.n	80006d2 <EXTI15_10_IRQHandler+0xb2>
	{
		EXTI_clear_pending_flag(EXTI_12);
 80006aa:	200c      	movs	r0, #12
 80006ac:	f7ff fe5c 	bl	8000368 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <EXTI15_10_IRQHandler+0x164>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	461a      	mov	r2, r3
 80006b6:	4b34      	ldr	r3, [pc, #208]	; (8000788 <EXTI15_10_IRQHandler+0x168>)
 80006b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d006      	beq.n	80006ce <EXTI15_10_IRQHandler+0xae>
		{
			EXTI_Handler[EXTI_source]();
 80006c0:	4b30      	ldr	r3, [pc, #192]	; (8000784 <EXTI15_10_IRQHandler+0x164>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b30      	ldr	r3, [pc, #192]	; (8000788 <EXTI15_10_IRQHandler+0x168>)
 80006c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006cc:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 80006ce:	2300      	movs	r3, #0
 80006d0:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_13 , &flag);
 80006d2:	1dfb      	adds	r3, r7, #7
 80006d4:	4619      	mov	r1, r3
 80006d6:	200d      	movs	r0, #13
 80006d8:	f7ff fe5e 	bl	8000398 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d113      	bne.n	800070a <EXTI15_10_IRQHandler+0xea>
	{
		EXTI_clear_pending_flag(EXTI_13);
 80006e2:	200d      	movs	r0, #13
 80006e4:	f7ff fe40 	bl	8000368 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 80006e8:	4b26      	ldr	r3, [pc, #152]	; (8000784 <EXTI15_10_IRQHandler+0x164>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b26      	ldr	r3, [pc, #152]	; (8000788 <EXTI15_10_IRQHandler+0x168>)
 80006f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d006      	beq.n	8000706 <EXTI15_10_IRQHandler+0xe6>
		{
			EXTI_Handler[EXTI_source]();
 80006f8:	4b22      	ldr	r3, [pc, #136]	; (8000784 <EXTI15_10_IRQHandler+0x164>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b22      	ldr	r3, [pc, #136]	; (8000788 <EXTI15_10_IRQHandler+0x168>)
 8000700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000704:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 8000706:	2300      	movs	r3, #0
 8000708:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_14 , &flag);
 800070a:	1dfb      	adds	r3, r7, #7
 800070c:	4619      	mov	r1, r3
 800070e:	200e      	movs	r0, #14
 8000710:	f7ff fe42 	bl	8000398 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d113      	bne.n	8000742 <EXTI15_10_IRQHandler+0x122>
	{
		EXTI_clear_pending_flag(EXTI_14);
 800071a:	200e      	movs	r0, #14
 800071c:	f7ff fe24 	bl	8000368 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <EXTI15_10_IRQHandler+0x164>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	461a      	mov	r2, r3
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <EXTI15_10_IRQHandler+0x168>)
 8000728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d006      	beq.n	800073e <EXTI15_10_IRQHandler+0x11e>
		{
			EXTI_Handler[EXTI_source]();
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <EXTI15_10_IRQHandler+0x164>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	461a      	mov	r2, r3
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <EXTI15_10_IRQHandler+0x168>)
 8000738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800073c:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 800073e:	2300      	movs	r3, #0
 8000740:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_15 , &flag);
 8000742:	1dfb      	adds	r3, r7, #7
 8000744:	4619      	mov	r1, r3
 8000746:	200f      	movs	r0, #15
 8000748:	f7ff fe26 	bl	8000398 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d113      	bne.n	800077a <EXTI15_10_IRQHandler+0x15a>
	{
		EXTI_clear_pending_flag(EXTI_15);
 8000752:	200f      	movs	r0, #15
 8000754:	f7ff fe08 	bl	8000368 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <EXTI15_10_IRQHandler+0x164>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	461a      	mov	r2, r3
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <EXTI15_10_IRQHandler+0x168>)
 8000760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d006      	beq.n	8000776 <EXTI15_10_IRQHandler+0x156>
		{
			EXTI_Handler[EXTI_source]();
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <EXTI15_10_IRQHandler+0x164>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	461a      	mov	r2, r3
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <EXTI15_10_IRQHandler+0x168>)
 8000770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000774:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 8000776:	2300      	movs	r3, #0
 8000778:	71fb      	strb	r3, [r7, #7]
	}
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200000b8 	.word	0x200000b8
 8000788:	2000005c 	.word	0x2000005c

0800078c <EXTI16_PVD_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI16_PVD_IRQHandler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <EXTI16_PVD_IRQHandler+0x30>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff fde7 	bl	8000368 <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <EXTI16_PVD_IRQHandler+0x30>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	461a      	mov	r2, r3
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <EXTI16_PVD_IRQHandler+0x34>)
 80007a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d006      	beq.n	80007b8 <EXTI16_PVD_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 80007aa:	4b04      	ldr	r3, [pc, #16]	; (80007bc <EXTI16_PVD_IRQHandler+0x30>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	461a      	mov	r2, r3
 80007b0:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <EXTI16_PVD_IRQHandler+0x34>)
 80007b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007b6:	4798      	blx	r3
	}
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200000b8 	.word	0x200000b8
 80007c0:	2000005c 	.word	0x2000005c

080007c4 <EXTI17_RTC_Alarm_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI17_RTC_Alarm_IRQHandler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 80007c8:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <EXTI17_RTC_Alarm_IRQHandler+0x30>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fdcb 	bl	8000368 <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <EXTI17_RTC_Alarm_IRQHandler+0x30>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	461a      	mov	r2, r3
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <EXTI17_RTC_Alarm_IRQHandler+0x34>)
 80007da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d006      	beq.n	80007f0 <EXTI17_RTC_Alarm_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 80007e2:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <EXTI17_RTC_Alarm_IRQHandler+0x30>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	461a      	mov	r2, r3
 80007e8:	4b03      	ldr	r3, [pc, #12]	; (80007f8 <EXTI17_RTC_Alarm_IRQHandler+0x34>)
 80007ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007ee:	4798      	blx	r3
	}
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200000b8 	.word	0x200000b8
 80007f8:	2000005c 	.word	0x2000005c

080007fc <EXTI18_OTG_FS_WKUP_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI18_OTG_FS_WKUP_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <EXTI18_OTG_FS_WKUP_IRQHandler+0x30>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fdaf 	bl	8000368 <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <EXTI18_OTG_FS_WKUP_IRQHandler+0x30>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	461a      	mov	r2, r3
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <EXTI18_OTG_FS_WKUP_IRQHandler+0x34>)
 8000812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d006      	beq.n	8000828 <EXTI18_OTG_FS_WKUP_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 800081a:	4b04      	ldr	r3, [pc, #16]	; (800082c <EXTI18_OTG_FS_WKUP_IRQHandler+0x30>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	461a      	mov	r2, r3
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <EXTI18_OTG_FS_WKUP_IRQHandler+0x34>)
 8000822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000826:	4798      	blx	r3
	}
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200000b8 	.word	0x200000b8
 8000830:	2000005c 	.word	0x2000005c

08000834 <EXTI22_RTC_WKUP_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI22_RTC_WKUP_IRQHandler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 8000838:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <EXTI22_RTC_WKUP_IRQHandler+0x30>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fd93 	bl	8000368 <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <EXTI22_RTC_WKUP_IRQHandler+0x30>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	461a      	mov	r2, r3
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <EXTI22_RTC_WKUP_IRQHandler+0x34>)
 800084a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d006      	beq.n	8000860 <EXTI22_RTC_WKUP_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 8000852:	4b04      	ldr	r3, [pc, #16]	; (8000864 <EXTI22_RTC_WKUP_IRQHandler+0x30>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <EXTI22_RTC_WKUP_IRQHandler+0x34>)
 800085a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800085e:	4798      	blx	r3
	}
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	200000b8 	.word	0x200000b8
 8000868:	2000005c 	.word	0x2000005c

0800086c <GPIO_Pin_init>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t GPIO_Pin_init(const PinConfig_t *pinConfig)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	Std_RetType_t ret = RET_OK;
 8000874:	2300      	movs	r3, #0
 8000876:	73fb      	strb	r3, [r7, #15]
	if(NULL == pinConfig)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d102      	bne.n	8000884 <GPIO_Pin_init+0x18>
	{
		ret = RET_ERROR;
 800087e:	2301      	movs	r3, #1
 8000880:	73fb      	strb	r3, [r7, #15]
 8000882:	e108      	b.n	8000a96 <GPIO_Pin_init+0x22a>
	}
	else
	{
		/*select gpio mode */
		/*clear the mode bits*/
		(GPIO_PORT[pinConfig->Port]->MODER) &=~(MODER_MASK << (pinConfig->Pin*MODER_PIN_ACCESS));
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	461a      	mov	r2, r3
 800088a:	4b86      	ldr	r3, [pc, #536]	; (8000aa4 <GPIO_Pin_init+0x238>)
 800088c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	785b      	ldrb	r3, [r3, #1]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	2103      	movs	r1, #3
 800089a:	fa01 f303 	lsl.w	r3, r1, r3
 800089e:	43db      	mvns	r3, r3
 80008a0:	4619      	mov	r1, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	4618      	mov	r0, r3
 80008a8:	4b7e      	ldr	r3, [pc, #504]	; (8000aa4 <GPIO_Pin_init+0x238>)
 80008aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80008ae:	400a      	ands	r2, r1
 80008b0:	601a      	str	r2, [r3, #0]
		/*set the mode bits*/
		(GPIO_PORT[pinConfig->Port]->MODER) |= ((pinConfig->Mode)<<(pinConfig->Pin*MODER_PIN_ACCESS));
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	461a      	mov	r2, r3
 80008b8:	4b7a      	ldr	r3, [pc, #488]	; (8000aa4 <GPIO_Pin_init+0x238>)
 80008ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	789b      	ldrb	r3, [r3, #2]
 80008c4:	4619      	mov	r1, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	785b      	ldrb	r3, [r3, #1]
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	fa01 f303 	lsl.w	r3, r1, r3
 80008d0:	4619      	mov	r1, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	4618      	mov	r0, r3
 80008d8:	4b72      	ldr	r3, [pc, #456]	; (8000aa4 <GPIO_Pin_init+0x238>)
 80008da:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80008de:	430a      	orrs	r2, r1
 80008e0:	601a      	str	r2, [r3, #0]

		/*select gpio pull state */
		/*clear the PUPDR bits*/
		(GPIO_PORT[pinConfig->Port]->PUPDR) &=~(PUPDR_MASK << (pinConfig->Pin)*PUPDR_PIN_ACCESS);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	461a      	mov	r2, r3
 80008e8:	4b6e      	ldr	r3, [pc, #440]	; (8000aa4 <GPIO_Pin_init+0x238>)
 80008ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ee:	68da      	ldr	r2, [r3, #12]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	785b      	ldrb	r3, [r3, #1]
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	2103      	movs	r1, #3
 80008f8:	fa01 f303 	lsl.w	r3, r1, r3
 80008fc:	43db      	mvns	r3, r3
 80008fe:	4619      	mov	r1, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4618      	mov	r0, r3
 8000906:	4b67      	ldr	r3, [pc, #412]	; (8000aa4 <GPIO_Pin_init+0x238>)
 8000908:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800090c:	400a      	ands	r2, r1
 800090e:	60da      	str	r2, [r3, #12]
		/*set the PUPDR bits*/
		(GPIO_PORT[pinConfig->Port]->PUPDR) |= ((pinConfig->PullType)<<(pinConfig->Pin*PUPDR_PIN_ACCESS));
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	4b63      	ldr	r3, [pc, #396]	; (8000aa4 <GPIO_Pin_init+0x238>)
 8000918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800091c:	68da      	ldr	r2, [r3, #12]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	795b      	ldrb	r3, [r3, #5]
 8000922:	4619      	mov	r1, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	785b      	ldrb	r3, [r3, #1]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	fa01 f303 	lsl.w	r3, r1, r3
 800092e:	4619      	mov	r1, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	4618      	mov	r0, r3
 8000936:	4b5b      	ldr	r3, [pc, #364]	; (8000aa4 <GPIO_Pin_init+0x238>)
 8000938:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800093c:	430a      	orrs	r2, r1
 800093e:	60da      	str	r2, [r3, #12]

		/*select output type & output speed in case of output or alternate function*/
		if(OUTPUT ==pinConfig->Mode || ALTERNATE_FUNCTION ==pinConfig->Mode)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	789b      	ldrb	r3, [r3, #2]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d004      	beq.n	8000952 <GPIO_Pin_init+0xe6>
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	789b      	ldrb	r3, [r3, #2]
 800094c:	2b02      	cmp	r3, #2
 800094e:	f040 80a2 	bne.w	8000a96 <GPIO_Pin_init+0x22a>
		{
			/*select output type {push pull , open drain}*/
			/*clear the OTYPER bit*/
			(GPIO_PORT[pinConfig->Port]->OTYPER) &=~ (OTYPER_MASK<< pinConfig->Pin);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	461a      	mov	r2, r3
 8000958:	4b52      	ldr	r3, [pc, #328]	; (8000aa4 <GPIO_Pin_init+0x238>)
 800095a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800095e:	685a      	ldr	r2, [r3, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	785b      	ldrb	r3, [r3, #1]
 8000964:	4619      	mov	r1, r3
 8000966:	2301      	movs	r3, #1
 8000968:	408b      	lsls	r3, r1
 800096a:	43db      	mvns	r3, r3
 800096c:	4619      	mov	r1, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	4618      	mov	r0, r3
 8000974:	4b4b      	ldr	r3, [pc, #300]	; (8000aa4 <GPIO_Pin_init+0x238>)
 8000976:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800097a:	400a      	ands	r2, r1
 800097c:	605a      	str	r2, [r3, #4]
			/*set the OTYPER bit*/
			(GPIO_PORT[pinConfig->Port]->OTYPER) |= ((pinConfig->Type)<<(pinConfig->Pin));
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	461a      	mov	r2, r3
 8000984:	4b47      	ldr	r3, [pc, #284]	; (8000aa4 <GPIO_Pin_init+0x238>)
 8000986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800098a:	685a      	ldr	r2, [r3, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	791b      	ldrb	r3, [r3, #4]
 8000990:	4619      	mov	r1, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	785b      	ldrb	r3, [r3, #1]
 8000996:	fa01 f303 	lsl.w	r3, r1, r3
 800099a:	4619      	mov	r1, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	4618      	mov	r0, r3
 80009a2:	4b40      	ldr	r3, [pc, #256]	; (8000aa4 <GPIO_Pin_init+0x238>)
 80009a4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80009a8:	430a      	orrs	r2, r1
 80009aa:	605a      	str	r2, [r3, #4]

			/*select output speed {low , medium , high , very high}*/
			/*clear the OSPEEDR bits*/
			(GPIO_PORT[pinConfig->Port]->OSPEEDR) &=~(PSPEEDR_MASK << (pinConfig->Pin*PSPEEDR_PIN_ACCESS));
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b3c      	ldr	r3, [pc, #240]	; (8000aa4 <GPIO_Pin_init+0x238>)
 80009b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009b8:	689a      	ldr	r2, [r3, #8]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	785b      	ldrb	r3, [r3, #1]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	2103      	movs	r1, #3
 80009c2:	fa01 f303 	lsl.w	r3, r1, r3
 80009c6:	43db      	mvns	r3, r3
 80009c8:	4619      	mov	r1, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	4618      	mov	r0, r3
 80009d0:	4b34      	ldr	r3, [pc, #208]	; (8000aa4 <GPIO_Pin_init+0x238>)
 80009d2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80009d6:	400a      	ands	r2, r1
 80009d8:	609a      	str	r2, [r3, #8]
			/*set the OSPEEDR bits*/
			(GPIO_PORT[pinConfig->Port]->OSPEEDR) |= ((pinConfig->Speed) <<(pinConfig->Pin*PSPEEDR_PIN_ACCESS));
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	461a      	mov	r2, r3
 80009e0:	4b30      	ldr	r3, [pc, #192]	; (8000aa4 <GPIO_Pin_init+0x238>)
 80009e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009e6:	689a      	ldr	r2, [r3, #8]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	78db      	ldrb	r3, [r3, #3]
 80009ec:	4619      	mov	r1, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	785b      	ldrb	r3, [r3, #1]
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	fa01 f303 	lsl.w	r3, r1, r3
 80009f8:	4619      	mov	r1, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	4618      	mov	r0, r3
 8000a00:	4b28      	ldr	r3, [pc, #160]	; (8000aa4 <GPIO_Pin_init+0x238>)
 8000a02:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000a06:	430a      	orrs	r2, r1
 8000a08:	609a      	str	r2, [r3, #8]

			if(ALTERNATE_FUNCTION == pinConfig->Mode)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	789b      	ldrb	r3, [r3, #2]
 8000a0e:	2b02      	cmp	r3, #2
 8000a10:	d141      	bne.n	8000a96 <GPIO_Pin_init+0x22a>
			{
				/*select the pin alternate function*/
				uint8_t l_reg_num = pinConfig->Pin / AFR_PIN_SHIFTING;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	785b      	ldrb	r3, [r3, #1]
 8000a16:	08db      	lsrs	r3, r3, #3
 8000a18:	73bb      	strb	r3, [r7, #14]
				uint8_t l_bit_num = pinConfig->Pin % AFR_PIN_SHIFTING;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	785b      	ldrb	r3, [r3, #1]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	737b      	strb	r3, [r7, #13]
				/*clear the AFR bits*/
				(GPIO_PORT[pinConfig->Port]->AFR[l_reg_num]) &=~(AFR_MASK << (l_bit_num *AFR_PIN_ACCESS));
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <GPIO_Pin_init+0x238>)
 8000a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a30:	7bba      	ldrb	r2, [r7, #14]
 8000a32:	3208      	adds	r2, #8
 8000a34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a38:	7b7b      	ldrb	r3, [r7, #13]
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	220f      	movs	r2, #15
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	43db      	mvns	r3, r3
 8000a44:	4618      	mov	r0, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <GPIO_Pin_init+0x238>)
 8000a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a52:	7bba      	ldrb	r2, [r7, #14]
 8000a54:	4001      	ands	r1, r0
 8000a56:	3208      	adds	r2, #8
 8000a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				/*set the AFR bits*/
				(GPIO_PORT[pinConfig->Port]->AFR[l_reg_num]) |= ((pinConfig->AltFunc) << (l_bit_num *AFR_PIN_ACCESS));
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <GPIO_Pin_init+0x238>)
 8000a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a68:	7bba      	ldrb	r2, [r7, #14]
 8000a6a:	3208      	adds	r2, #8
 8000a6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	799b      	ldrb	r3, [r3, #6]
 8000a74:	461a      	mov	r2, r3
 8000a76:	7b7b      	ldrb	r3, [r7, #13]
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <GPIO_Pin_init+0x238>)
 8000a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a8c:	7bba      	ldrb	r2, [r7, #14]
 8000a8e:	4301      	orrs	r1, r0
 8000a90:	3208      	adds	r2, #8
 8000a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}
		}
	}
	return ret;
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000000 	.word	0x20000000

08000aa8 <GPIO_Toggle_Pin_Value>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t GPIO_Toggle_Pin_Value(Port_t port , Pin_t pinNum)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	460a      	mov	r2, r1
 8000ab2:	71fb      	strb	r3, [r7, #7]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	71bb      	strb	r3, [r7, #6]
	Std_RetType_t ret = RET_OK;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	73fb      	strb	r3, [r7, #15]
	if((PORTH < port)|(PIN15 < pinNum))
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	2b05      	cmp	r3, #5
 8000ac0:	bf8c      	ite	hi
 8000ac2:	2301      	movhi	r3, #1
 8000ac4:	2300      	movls	r3, #0
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	79bb      	ldrb	r3, [r7, #6]
 8000aca:	2b0f      	cmp	r3, #15
 8000acc:	bf8c      	ite	hi
 8000ace:	2301      	movhi	r3, #1
 8000ad0:	2300      	movls	r3, #0
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d002      	beq.n	8000ae2 <GPIO_Toggle_Pin_Value+0x3a>
	{
		ret = RET_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	73fb      	strb	r3, [r7, #15]
 8000ae0:	e00f      	b.n	8000b02 <GPIO_Toggle_Pin_Value+0x5a>
	}
	else
	{
		GPIO_PORT[port]->ODR ^= (1<< pinNum);
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <GPIO_Toggle_Pin_Value+0x68>)
 8000ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aea:	695a      	ldr	r2, [r3, #20]
 8000aec:	79bb      	ldrb	r3, [r7, #6]
 8000aee:	2101      	movs	r1, #1
 8000af0:	fa01 f303 	lsl.w	r3, r1, r3
 8000af4:	4618      	mov	r0, r3
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	4905      	ldr	r1, [pc, #20]	; (8000b10 <GPIO_Toggle_Pin_Value+0x68>)
 8000afa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000afe:	4042      	eors	r2, r0
 8000b00:	615a      	str	r2, [r3, #20]
		/*GPIO_PORT[port]->BSRR = 1<< (pin +16);  faster*/
	}
	return ret;
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20000000 	.word	0x20000000

08000b14 <HALL_RCC_OscConfig>:


#include "../../../Inc/MCAL/RCC/RCC.h"

Std_RetType_t HALL_RCC_OscConfig(RCC_OscInitTypedef *RCC_OscInitStruct)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	Std_RetType_t ret = RET_OK;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	73fb      	strb	r3, [r7, #15]
	if(NULL == RCC_OscInitStruct)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d102      	bne.n	8000b2c <HALL_RCC_OscConfig+0x18>
	{
		ret = RET_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	73fb      	strb	r3, [r7, #15]
 8000b2a:	e04a      	b.n	8000bc2 <HALL_RCC_OscConfig+0xae>
	}
	else
	{
		if(RCC_OSCILLATORTYPE_HSE == RCC_OscInitStruct->OscillatorType)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d11d      	bne.n	8000b70 <HALL_RCC_OscConfig+0x5c>
		{
			if(RCC_HSE_ON == RCC_OscInitStruct->HSE_State)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d112      	bne.n	8000b62 <HALL_RCC_OscConfig+0x4e>
			{
				/*HSE oscillator selected as system clock*/
				SET_BIT(RCC->CFGR , RCC_CFGR_SW0_POS);
 8000b3c:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <HALL_RCC_OscConfig+0xbc>)
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	4a23      	ldr	r2, [pc, #140]	; (8000bd0 <HALL_RCC_OscConfig+0xbc>)
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	6093      	str	r3, [r2, #8]
				CLEAR_BIT(RCC->CFGR,RCC_CFGR_SW1_POS);
 8000b48:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <HALL_RCC_OscConfig+0xbc>)
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	4a20      	ldr	r2, [pc, #128]	; (8000bd0 <HALL_RCC_OscConfig+0xbc>)
 8000b4e:	f023 0302 	bic.w	r3, r3, #2
 8000b52:	6093      	str	r3, [r2, #8]
				/*HSE oscillator ON*/
				SET_BIT(RCC->CR,RCC_CR_HSEON_POS);
 8000b54:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <HALL_RCC_OscConfig+0xbc>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a1d      	ldr	r2, [pc, #116]	; (8000bd0 <HALL_RCC_OscConfig+0xbc>)
 8000b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b5e:	6013      	str	r3, [r2, #0]
 8000b60:	e02f      	b.n	8000bc2 <HALL_RCC_OscConfig+0xae>
			}
			else
			{
				CLEAR_BIT(RCC->CR,RCC_CR_HSEON_POS);
 8000b62:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <HALL_RCC_OscConfig+0xbc>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a1a      	ldr	r2, [pc, #104]	; (8000bd0 <HALL_RCC_OscConfig+0xbc>)
 8000b68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b6c:	6013      	str	r3, [r2, #0]
 8000b6e:	e028      	b.n	8000bc2 <HALL_RCC_OscConfig+0xae>
			}
		}
		else if(RCC_OSCILLATORTYPE_HSI == RCC_OscInitStruct->OscillatorType)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d11d      	bne.n	8000bb4 <HALL_RCC_OscConfig+0xa0>
		{
			if(RCC_HSI_ON == RCC_OscInitStruct->HSI_State)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d112      	bne.n	8000ba6 <HALL_RCC_OscConfig+0x92>
			{
				/*HSI oscillator selected as system clock*/
				CLEAR_BIT(RCC->CFGR,RCC_CFGR_SW0_POS);
 8000b80:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <HALL_RCC_OscConfig+0xbc>)
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <HALL_RCC_OscConfig+0xbc>)
 8000b86:	f023 0301 	bic.w	r3, r3, #1
 8000b8a:	6093      	str	r3, [r2, #8]
				CLEAR_BIT(RCC->CFGR,RCC_CFGR_SW1_POS);
 8000b8c:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <HALL_RCC_OscConfig+0xbc>)
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <HALL_RCC_OscConfig+0xbc>)
 8000b92:	f023 0302 	bic.w	r3, r3, #2
 8000b96:	6093      	str	r3, [r2, #8]
				/*HSI oscillator ON*/
				SET_BIT(RCC->CR,RCC_CR_HSION_POS);
 8000b98:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <HALL_RCC_OscConfig+0xbc>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0c      	ldr	r2, [pc, #48]	; (8000bd0 <HALL_RCC_OscConfig+0xbc>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	6013      	str	r3, [r2, #0]
 8000ba4:	e00d      	b.n	8000bc2 <HALL_RCC_OscConfig+0xae>
			}
			else
			{
				CLEAR_BIT(RCC->CR,RCC_CR_HSION_POS);
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <HALL_RCC_OscConfig+0xbc>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a09      	ldr	r2, [pc, #36]	; (8000bd0 <HALL_RCC_OscConfig+0xbc>)
 8000bac:	f023 0301 	bic.w	r3, r3, #1
 8000bb0:	6013      	str	r3, [r2, #0]
 8000bb2:	e006      	b.n	8000bc2 <HALL_RCC_OscConfig+0xae>
			}
		}
		else if(RCC_OSCILLATORTYPE_LSE == RCC_OscInitStruct->OscillatorType)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b04      	cmp	r3, #4
 8000bba:	d002      	beq.n	8000bc2 <HALL_RCC_OscConfig+0xae>
			else
			{

			}
		}
		else if(RCC_OSCILLATORTYPE_LSI == RCC_OscInitStruct->OscillatorType)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b08      	cmp	r3, #8
		else
		{
			/*Nothing*/
		}
	}
	return ret;
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <HALL_RCC_ClockConfig>:

Std_RetType_t HALL_RCC_ClockConfig(RCC_ClkInitTypedef *RCC_ClockInitStruct)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	Std_RetType_t ret = RET_OK;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	73fb      	strb	r3, [r7, #15]
	if(NULL == RCC_ClockInitStruct)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d102      	bne.n	8000bec <HALL_RCC_ClockConfig+0x18>
	{
		ret = RET_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	73fb      	strb	r3, [r7, #15]
 8000bea:	e01a      	b.n	8000c22 <HALL_RCC_ClockConfig+0x4e>
	}
	else
	{
		MODIFY_REG(RCC->CFGR ,RCC_CFGR_HPRE_POS, RCC_ClockInitStruct->AHBClkDivider);
 8000bec:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <HALL_RCC_ClockConfig+0x5c>)
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	f023 0204 	bic.w	r2, r3, #4
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	490d      	ldr	r1, [pc, #52]	; (8000c30 <HALL_RCC_ClockConfig+0x5c>)
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	608b      	str	r3, [r1, #8]
		MODIFY_REG(RCC->CFGR ,RCC_CFGR_PPRE1_POS, RCC_ClockInitStruct->APB1ClkDivider);
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <HALL_RCC_ClockConfig+0x5c>)
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	f023 020a 	bic.w	r2, r3, #10
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	4909      	ldr	r1, [pc, #36]	; (8000c30 <HALL_RCC_ClockConfig+0x5c>)
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	608b      	str	r3, [r1, #8]
		MODIFY_REG(RCC->CFGR ,RCC_CFGR_PPRE2_POS, RCC_ClockInitStruct->APB2ClkDivider);
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <HALL_RCC_ClockConfig+0x5c>)
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	f023 020d 	bic.w	r2, r3, #13
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	4904      	ldr	r1, [pc, #16]	; (8000c30 <HALL_RCC_ClockConfig+0x5c>)
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	608b      	str	r3, [r1, #8]
	}
	return ret;
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800

08000c34 <USART_init>:

static void usart_set_baud_rate(const USART_Config_t* USART_obj);


Std_RetType_t USART_init(const USART_Config_t* USART_obj)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	Std_RetType_t ret = RET_OK;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	73fb      	strb	r3, [r7, #15]
	if(NULL == USART_obj)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d102      	bne.n	8000c4c <USART_init+0x18>
	{
		ret = RET_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	73fb      	strb	r3, [r7, #15]
 8000c4a:	e0d2      	b.n	8000df2 <USART_init+0x1be>
	}
	else
	{
		usart_set_baud_rate(USART_obj);
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f000 f8d7 	bl	8000e00 <usart_set_baud_rate>

		USART_Array[USART_obj->usart_source]->USART_CR1 |= (1<<(USART_ENABLE_BIT_POS)); //USART Enable
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	4b68      	ldr	r3, [pc, #416]	; (8000dfc <USART_init+0x1c8>)
 8000c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	4b65      	ldr	r3, [pc, #404]	; (8000dfc <USART_init+0x1c8>)
 8000c68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000c70:	60da      	str	r2, [r3, #12]
		USART_Array[USART_obj->usart_source]->USART_CR1 |= ((USART_obj->usart_word_length)<<(USART_M_BIT_POS)); //word length 0-> 8bits , 1-> 9bits
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	461a      	mov	r2, r3
 8000c78:	4b60      	ldr	r3, [pc, #384]	; (8000dfc <USART_init+0x1c8>)
 8000c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c7e:	68da      	ldr	r2, [r3, #12]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	7a5b      	ldrb	r3, [r3, #9]
 8000c84:	031b      	lsls	r3, r3, #12
 8000c86:	4619      	mov	r1, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	4b5b      	ldr	r3, [pc, #364]	; (8000dfc <USART_init+0x1c8>)
 8000c90:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000c94:	430a      	orrs	r2, r1
 8000c96:	60da      	str	r2, [r3, #12]
		if(WITHOUT_PARITY == USART_obj->usart_parity)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	7a9b      	ldrb	r3, [r3, #10]
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d110      	bne.n	8000cc2 <USART_init+0x8e>
		{
			USART_Array[USART_obj->usart_source]->USART_CR1 &=~ (1<<(USART_PARITY_CONTROL_ENABLE_BIT_POS)); //Disable parity
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b55      	ldr	r3, [pc, #340]	; (8000dfc <USART_init+0x1c8>)
 8000ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cac:	68da      	ldr	r2, [r3, #12]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4b51      	ldr	r3, [pc, #324]	; (8000dfc <USART_init+0x1c8>)
 8000cb6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000cba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cbe:	60da      	str	r2, [r3, #12]
 8000cc0:	e022      	b.n	8000d08 <USART_init+0xd4>
		}
		else
		{
			USART_Array[USART_obj->usart_source]->USART_CR1 |= (1<<(USART_PARITY_CONTROL_ENABLE_BIT_POS)); //Enable parity
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4b4c      	ldr	r3, [pc, #304]	; (8000dfc <USART_init+0x1c8>)
 8000cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cce:	68da      	ldr	r2, [r3, #12]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4b49      	ldr	r3, [pc, #292]	; (8000dfc <USART_init+0x1c8>)
 8000cd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000cdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ce0:	60da      	str	r2, [r3, #12]
			USART_Array[USART_obj->usart_source]->USART_CR1 |= ((USART_obj->usart_parity)<<(USART_PARITY_SELECTION_BIT_POS)); //Even or Odd parity
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4b44      	ldr	r3, [pc, #272]	; (8000dfc <USART_init+0x1c8>)
 8000cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cee:	68da      	ldr	r2, [r3, #12]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	7a9b      	ldrb	r3, [r3, #10]
 8000cf4:	025b      	lsls	r3, r3, #9
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	4b3f      	ldr	r3, [pc, #252]	; (8000dfc <USART_init+0x1c8>)
 8000d00:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000d04:	430a      	orrs	r2, r1
 8000d06:	60da      	str	r2, [r3, #12]
		}
		switch(USART_obj->usart_mode)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	789b      	ldrb	r3, [r3, #2]
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d028      	beq.n	8000d62 <USART_init+0x12e>
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	dc47      	bgt.n	8000da4 <USART_init+0x170>
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d002      	beq.n	8000d1e <USART_init+0xea>
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d011      	beq.n	8000d40 <USART_init+0x10c>
			break ;
			case RX_TX :
					USART_Array[USART_obj->usart_source]->USART_CR1 |= (1 << (USART_RECEIVER_ENABLE_BIT_POS));// Receiver enable
					USART_Array[USART_obj->usart_source]->USART_CR1 |= (1 << (USART_TRANSMITTER_ENABLE_BIT_POS)); // Transmitter enable
			break ;
			default : break;
 8000d1c:	e042      	b.n	8000da4 <USART_init+0x170>
					USART_Array[USART_obj->usart_source]->USART_CR1 |= (1 << (USART_RECEIVER_ENABLE_BIT_POS));// Receiver enable
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	4b35      	ldr	r3, [pc, #212]	; (8000dfc <USART_init+0x1c8>)
 8000d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d2a:	68da      	ldr	r2, [r3, #12]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	4619      	mov	r1, r3
 8000d32:	4b32      	ldr	r3, [pc, #200]	; (8000dfc <USART_init+0x1c8>)
 8000d34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d38:	f042 0204 	orr.w	r2, r2, #4
 8000d3c:	60da      	str	r2, [r3, #12]
			break;
 8000d3e:	e032      	b.n	8000da6 <USART_init+0x172>
					USART_Array[USART_obj->usart_source]->USART_CR1 |= (1 << (USART_TRANSMITTER_ENABLE_BIT_POS)); // Transmitter enable
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b2d      	ldr	r3, [pc, #180]	; (8000dfc <USART_init+0x1c8>)
 8000d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d4c:	68da      	ldr	r2, [r3, #12]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	4619      	mov	r1, r3
 8000d54:	4b29      	ldr	r3, [pc, #164]	; (8000dfc <USART_init+0x1c8>)
 8000d56:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d5a:	f042 0208 	orr.w	r2, r2, #8
 8000d5e:	60da      	str	r2, [r3, #12]
			break ;
 8000d60:	e021      	b.n	8000da6 <USART_init+0x172>
					USART_Array[USART_obj->usart_source]->USART_CR1 |= (1 << (USART_RECEIVER_ENABLE_BIT_POS));// Receiver enable
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	461a      	mov	r2, r3
 8000d68:	4b24      	ldr	r3, [pc, #144]	; (8000dfc <USART_init+0x1c8>)
 8000d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d6e:	68da      	ldr	r2, [r3, #12]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	4619      	mov	r1, r3
 8000d76:	4b21      	ldr	r3, [pc, #132]	; (8000dfc <USART_init+0x1c8>)
 8000d78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d7c:	f042 0204 	orr.w	r2, r2, #4
 8000d80:	60da      	str	r2, [r3, #12]
					USART_Array[USART_obj->usart_source]->USART_CR1 |= (1 << (USART_TRANSMITTER_ENABLE_BIT_POS)); // Transmitter enable
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <USART_init+0x1c8>)
 8000d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d8e:	68da      	ldr	r2, [r3, #12]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4619      	mov	r1, r3
 8000d96:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <USART_init+0x1c8>)
 8000d98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d9c:	f042 0208 	orr.w	r2, r2, #8
 8000da0:	60da      	str	r2, [r3, #12]
			break ;
 8000da2:	e000      	b.n	8000da6 <USART_init+0x172>
			default : break;
 8000da4:	bf00      	nop
		}

		USART_Array[USART_obj->usart_source]->USART_CR2 |= ((USART_obj->usart_stop_bits) << (USART_STOP_BITS_POS)); //Stop bits selection
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <USART_init+0x1c8>)
 8000dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db2:	691a      	ldr	r2, [r3, #16]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	7a1b      	ldrb	r3, [r3, #8]
 8000db8:	031b      	lsls	r3, r3, #12
 8000dba:	4619      	mov	r1, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <USART_init+0x1c8>)
 8000dc4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	611a      	str	r2, [r3, #16]

		USART_Array[USART_obj->usart_source]->USART_CR1 |= ((USART_obj->usart_oversampling) << (OVERSAMPLING_BIT_POS)); //Select oversampling mode
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <USART_init+0x1c8>)
 8000dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dd8:	68da      	ldr	r2, [r3, #12]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	7adb      	ldrb	r3, [r3, #11]
 8000dde:	03db      	lsls	r3, r3, #15
 8000de0:	4619      	mov	r1, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <USART_init+0x1c8>)
 8000dea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000dee:	430a      	orrs	r2, r1
 8000df0:	60da      	str	r2, [r3, #12]
	}
	return ret;
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000018 	.word	0x20000018

08000e00 <usart_set_baud_rate>:

	}
}

void usart_set_baud_rate(const USART_Config_t* USART_obj)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b087      	sub	sp, #28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	uint32_t baud_rate = USART_obj->usart_baud_rate;	//baud = (Fck)/(8*(2-OVER8)*USARTDIV);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	60fb      	str	r3, [r7, #12]
	uint32_t result;
	uint32_t mantissa;
	uint32_t fraction;
	if(OVERSAMPLING_BY_16==(USART_obj->usart_oversampling))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	7adb      	ldrb	r3, [r3, #11]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d11c      	bne.n	8000e50 <usart_set_baud_rate+0x50>
	{
		result = ((42000000)/(8*2*baud_rate))*1000;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	011b      	lsls	r3, r3, #4
 8000e1a:	4a31      	ldr	r2, [pc, #196]	; (8000ee0 <usart_set_baud_rate+0xe0>)
 8000e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e24:	fb02 f303 	mul.w	r3, r2, r3
 8000e28:	617b      	str	r3, [r7, #20]
		fraction = (((result%1000)*16)+500)/1000;
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ee4 <usart_set_baud_rate+0xe4>)
 8000e2e:	fba3 1302 	umull	r1, r3, r3, r2
 8000e32:	099b      	lsrs	r3, r3, #6
 8000e34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e38:	fb01 f303 	mul.w	r3, r1, r3
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	011b      	lsls	r3, r3, #4
 8000e40:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000e44:	4a27      	ldr	r2, [pc, #156]	; (8000ee4 <usart_set_baud_rate+0xe4>)
 8000e46:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4a:	099b      	lsrs	r3, r3, #6
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	e01b      	b.n	8000e88 <usart_set_baud_rate+0x88>
	}
	else
	{
		result = ((42000000)/(8*baud_rate))*1000;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	4a22      	ldr	r2, [pc, #136]	; (8000ee0 <usart_set_baud_rate+0xe0>)
 8000e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e5e:	fb02 f303 	mul.w	r3, r2, r3
 8000e62:	617b      	str	r3, [r7, #20]
		fraction = (((result%1000)*8)+500)/1000;
 8000e64:	697a      	ldr	r2, [r7, #20]
 8000e66:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <usart_set_baud_rate+0xe4>)
 8000e68:	fba3 1302 	umull	r1, r3, r3, r2
 8000e6c:	099b      	lsrs	r3, r3, #6
 8000e6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e72:	fb01 f303 	mul.w	r3, r1, r3
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000e7e:	4a19      	ldr	r2, [pc, #100]	; (8000ee4 <usart_set_baud_rate+0xe4>)
 8000e80:	fba2 2303 	umull	r2, r3, r2, r3
 8000e84:	099b      	lsrs	r3, r3, #6
 8000e86:	613b      	str	r3, [r7, #16]
	}
	mantissa = result/1000;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	4a16      	ldr	r2, [pc, #88]	; (8000ee4 <usart_set_baud_rate+0xe4>)
 8000e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e90:	099b      	lsrs	r3, r3, #6
 8000e92:	60bb      	str	r3, [r7, #8]
	USART_Array[USART_obj->usart_source]->USART_BRR |= ((mantissa)<< 4);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <usart_set_baud_rate+0xe8>)
 8000e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea0:	6899      	ldr	r1, [r3, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	011a      	lsls	r2, r3, #4
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <usart_set_baud_rate+0xe8>)
 8000eae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	609a      	str	r2, [r3, #8]
	USART_Array[USART_obj->usart_source]->USART_BRR |= ((fraction)<< 0);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <usart_set_baud_rate+0xe8>)
 8000ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec2:	6899      	ldr	r1, [r3, #8]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <usart_set_baud_rate+0xe8>)
 8000ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	609a      	str	r2, [r3, #8]

}
 8000ed6:	bf00      	nop
 8000ed8:	371c      	adds	r7, #28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr
 8000ee0:	0280de80 	.word	0x0280de80
 8000ee4:	10624dd3 	.word	0x10624dd3
 8000ee8:	20000018 	.word	0x20000018

08000eec <main>:

};


int main(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	SystemClock_Config();
 8000ef0:	f000 f82e 	bl	8000f50 <SystemClock_Config>
	Systick_init();
 8000ef4:	f7ff f9ce 	bl	8000294 <Systick_init>
	RCC_GPIOC_CLK_ENABLE();
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <main+0x54>)
 8000efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efc:	4a10      	ldr	r2, [pc, #64]	; (8000f40 <main+0x54>)
 8000efe:	f043 0304 	orr.w	r3, r3, #4
 8000f02:	6313      	str	r3, [r2, #48]	; 0x30
	RCC_GPIOB_CLK_ENABLE();
 8000f04:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <main+0x54>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f08:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <main+0x54>)
 8000f0a:	f043 0302 	orr.w	r3, r3, #2
 8000f0e:	6313      	str	r3, [r2, #48]	; 0x30
	//RCC_SYSCFG_CLK_ENABLE();
	scb_set_priority_group(GROUP_PRIORITIES_4_SUB_PRIORITIES_4);	  // preemption
 8000f10:	480c      	ldr	r0, [pc, #48]	; (8000f44 <main+0x58>)
 8000f12:	f7ff f991 	bl	8000238 <scb_set_priority_group>
	//cb_set_priority_group(GROUP_PRIORITIES_1_SUB_PRIORITIES_16);   // no preemption because 1 group
	GPIO_Pin_init(&PC13);
 8000f16:	480c      	ldr	r0, [pc, #48]	; (8000f48 <main+0x5c>)
 8000f18:	f7ff fca8 	bl	800086c <GPIO_Pin_init>

	RCC_USART2_CLK_ENABLE();
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <main+0x54>)
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <main+0x54>)
 8000f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f26:	6413      	str	r3, [r2, #64]	; 0x40
	USART_init(&my_usart);
 8000f28:	4808      	ldr	r0, [pc, #32]	; (8000f4c <main+0x60>)
 8000f2a:	f7ff fe83 	bl	8000c34 <USART_init>


    /* Loop forever */
	while(1)
	{
		GPIO_Toggle_Pin_Value(PORTC, PIN13);
 8000f2e:	210d      	movs	r1, #13
 8000f30:	2002      	movs	r0, #2
 8000f32:	f7ff fdb9 	bl	8000aa8 <GPIO_Toggle_Pin_Value>
		delay_ms(100);
 8000f36:	2064      	movs	r0, #100	; 0x64
 8000f38:	f7ff f9fe 	bl	8000338 <delay_ms>
		GPIO_Toggle_Pin_Value(PORTC, PIN13);
 8000f3c:	e7f7      	b.n	8000f2e <main+0x42>
 8000f3e:	bf00      	nop
 8000f40:	40023800 	.word	0x40023800
 8000f44:	05fa0500 	.word	0x05fa0500
 8000f48:	20000024 	.word	0x20000024
 8000f4c:	2000002c 	.word	0x2000002c

08000f50 <SystemClock_Config>:

}


Std_RetType_t SystemClock_Config(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af00      	add	r7, sp, #0
	Std_RetType_t ret = RET_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	RCC_OscInitTypedef RCC_OscInitStruct ={0};
 8000f5c:	f107 0310 	add.w	r3, r7, #16
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
	RCC_ClkInitTypedef RCC_ClkInitStruct ={0};
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f76:	2301      	movs	r3, #1
 8000f78:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.HSE_State = RCC_HSE_ON;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	617b      	str	r3, [r7, #20]
	ret = HALL_RCC_OscConfig(&RCC_OscInitStruct);
 8000f7e:	f107 0310 	add.w	r3, r7, #16
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fdc6 	bl	8000b14 <HALL_RCC_OscConfig>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	RCC_ClkInitStruct.AHBClkDivider  =RCC_SYSCLK_AHB_DIV1;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.APB1ClkDivider =RCC_HCLK_APB1_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB2ClkDivider =RCC_HCLK_APB2_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
	ret = HALL_RCC_ClockConfig(&RCC_ClkInitStruct);
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fe19 	bl	8000bd4 <HALL_RCC_ClockConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	return ret;
 8000fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3728      	adds	r7, #40	; 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <USART2_IRQHandler>:


void USART2_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0

	num++;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <USART2_IRQHandler+0x38>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <USART2_IRQHandler+0x38>)
 8000fc4:	701a      	strb	r2, [r3, #0]
	num++;
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <USART2_IRQHandler+0x38>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <USART2_IRQHandler+0x38>)
 8000fd2:	701a      	strb	r2, [r3, #0]
	nvic_set_pending_flag(ADC_IRQn);
 8000fd4:	2012      	movs	r0, #18
 8000fd6:	f7ff f8fd 	bl	80001d4 <nvic_set_pending_flag>
	num++;
 8000fda:	4b04      	ldr	r3, [pc, #16]	; (8000fec <USART2_IRQHandler+0x38>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	4b01      	ldr	r3, [pc, #4]	; (8000fec <USART2_IRQHandler+0x38>)
 8000fe6:	701a      	strb	r2, [r3, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200000b9 	.word	0x200000b9

08000ff0 <ADC_IRQHandler>:

void ADC_IRQHandler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
	num+=5;
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <ADC_IRQHandler+0x1c>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	3305      	adds	r3, #5
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4b03      	ldr	r3, [pc, #12]	; (800100c <ADC_IRQHandler+0x1c>)
 8001000:	701a      	strb	r2, [r3, #0]
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	200000b9 	.word	0x200000b9

08001010 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001010:	480d      	ldr	r0, [pc, #52]	; (8001048 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001012:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001014:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001018:	480c      	ldr	r0, [pc, #48]	; (800104c <LoopForever+0x6>)
  ldr r1, =_edata
 800101a:	490d      	ldr	r1, [pc, #52]	; (8001050 <LoopForever+0xa>)
  ldr r2, =_sidata
 800101c:	4a0d      	ldr	r2, [pc, #52]	; (8001054 <LoopForever+0xe>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001030:	4c0a      	ldr	r4, [pc, #40]	; (800105c <LoopForever+0x16>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800103e:	f000 f811 	bl	8001064 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001042:	f7ff ff53 	bl	8000eec <main>

08001046 <LoopForever>:

LoopForever:
  b LoopForever
 8001046:	e7fe      	b.n	8001046 <LoopForever>
  ldr   r0, =_estack
 8001048:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800104c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001050:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8001054:	080010cc 	.word	0x080010cc
  ldr r2, =_sbss
 8001058:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 800105c:	200000bc 	.word	0x200000bc

08001060 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001060:	e7fe      	b.n	8001060 <BusFault_Handler>
	...

08001064 <__libc_init_array>:
 8001064:	b570      	push	{r4, r5, r6, lr}
 8001066:	4d0d      	ldr	r5, [pc, #52]	; (800109c <__libc_init_array+0x38>)
 8001068:	4c0d      	ldr	r4, [pc, #52]	; (80010a0 <__libc_init_array+0x3c>)
 800106a:	1b64      	subs	r4, r4, r5
 800106c:	10a4      	asrs	r4, r4, #2
 800106e:	2600      	movs	r6, #0
 8001070:	42a6      	cmp	r6, r4
 8001072:	d109      	bne.n	8001088 <__libc_init_array+0x24>
 8001074:	4d0b      	ldr	r5, [pc, #44]	; (80010a4 <__libc_init_array+0x40>)
 8001076:	4c0c      	ldr	r4, [pc, #48]	; (80010a8 <__libc_init_array+0x44>)
 8001078:	f000 f818 	bl	80010ac <_init>
 800107c:	1b64      	subs	r4, r4, r5
 800107e:	10a4      	asrs	r4, r4, #2
 8001080:	2600      	movs	r6, #0
 8001082:	42a6      	cmp	r6, r4
 8001084:	d105      	bne.n	8001092 <__libc_init_array+0x2e>
 8001086:	bd70      	pop	{r4, r5, r6, pc}
 8001088:	f855 3b04 	ldr.w	r3, [r5], #4
 800108c:	4798      	blx	r3
 800108e:	3601      	adds	r6, #1
 8001090:	e7ee      	b.n	8001070 <__libc_init_array+0xc>
 8001092:	f855 3b04 	ldr.w	r3, [r5], #4
 8001096:	4798      	blx	r3
 8001098:	3601      	adds	r6, #1
 800109a:	e7f2      	b.n	8001082 <__libc_init_array+0x1e>
 800109c:	080010c4 	.word	0x080010c4
 80010a0:	080010c4 	.word	0x080010c4
 80010a4:	080010c4 	.word	0x080010c4
 80010a8:	080010c8 	.word	0x080010c8

080010ac <_init>:
 80010ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ae:	bf00      	nop
 80010b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010b2:	bc08      	pop	{r3}
 80010b4:	469e      	mov	lr, r3
 80010b6:	4770      	bx	lr

080010b8 <_fini>:
 80010b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ba:	bf00      	nop
 80010bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010be:	bc08      	pop	{r3}
 80010c0:	469e      	mov	lr, r3
 80010c2:	4770      	bx	lr
