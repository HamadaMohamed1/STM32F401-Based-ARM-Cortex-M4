
STM32F401_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000db0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f44  08000f44  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f44  08000f44  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08000f44  08000f44  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f44  08000f44  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f44  08000f44  00010f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f48  08000f48  00010f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08000f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000030  08000f7c  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08000f7c  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002005a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000226e  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000099e  00000000  00000000  0002230b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f8  00000000  00000000  00022cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000156  00000000  00000000  00022ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001805  00000000  00000000  00022ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000035d3  00000000  00000000  00024803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00006517  00000000  00000000  00027dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000005a0  00000000  00000000  0002e2f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0002e890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000030 	.word	0x20000030
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000f2c 	.word	0x08000f2c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000034 	.word	0x20000034
 80001d0:	08000f2c 	.word	0x08000f2c

080001d4 <nvic_enable>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t nvic_enable(IRQn_Type IRQNum)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
	Std_RetType_t ret = RET_OK;
 80001de:	2300      	movs	r3, #0
 80001e0:	73fb      	strb	r3, [r7, #15]
	uint8_t l_Reg_num ;
	uint8_t l_Bit_num ;
	if(IRQNum > SPI4_IRQn)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	2b54      	cmp	r3, #84	; 0x54
 80001e8:	dd02      	ble.n	80001f0 <nvic_enable+0x1c>
	{
		ret = RET_ERROR;
 80001ea:	2301      	movs	r3, #1
 80001ec:	73fb      	strb	r3, [r7, #15]
 80001ee:	e01a      	b.n	8000226 <nvic_enable+0x52>
	}
	else
	{
		/*interrupt enable*/
		l_Reg_num = (IRQNum / 32);
 80001f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	da00      	bge.n	80001fa <nvic_enable+0x26>
 80001f8:	331f      	adds	r3, #31
 80001fa:	115b      	asrs	r3, r3, #5
 80001fc:	b25b      	sxtb	r3, r3
 80001fe:	73bb      	strb	r3, [r7, #14]
		l_Bit_num = (IRQNum % 32);
 8000200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000204:	425a      	negs	r2, r3
 8000206:	f003 031f 	and.w	r3, r3, #31
 800020a:	f002 021f 	and.w	r2, r2, #31
 800020e:	bf58      	it	pl
 8000210:	4253      	negpl	r3, r2
 8000212:	b25b      	sxtb	r3, r3
 8000214:	737b      	strb	r3, [r7, #13]
		NVIC->ISER[l_Reg_num] = (1<<l_Bit_num);
 8000216:	7b7b      	ldrb	r3, [r7, #13]
 8000218:	2201      	movs	r2, #1
 800021a:	fa02 f103 	lsl.w	r1, r2, r3
 800021e:	4a05      	ldr	r2, [pc, #20]	; (8000234 <nvic_enable+0x60>)
 8000220:	7bbb      	ldrb	r3, [r7, #14]
 8000222:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	return ret;
 8000226:	7bfb      	ldrb	r3, [r7, #15]
}
 8000228:	4618      	mov	r0, r3
 800022a:	3714      	adds	r7, #20
 800022c:	46bd      	mov	sp, r7
 800022e:	bc80      	pop	{r7}
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	e000e100 	.word	0xe000e100

08000238 <nvic_set_priority>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t nvic_set_priority(IRQn_Type IRQNum,uint8_t priority)
{
 8000238:	b480      	push	{r7}
 800023a:	b085      	sub	sp, #20
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	460a      	mov	r2, r1
 8000242:	71fb      	strb	r3, [r7, #7]
 8000244:	4613      	mov	r3, r2
 8000246:	71bb      	strb	r3, [r7, #6]
	Std_RetType_t ret = RET_OK;
 8000248:	2300      	movs	r3, #0
 800024a:	73fb      	strb	r3, [r7, #15]
	if(IRQNum > SPI4_IRQn)
 800024c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000250:	2b54      	cmp	r3, #84	; 0x54
 8000252:	dd02      	ble.n	800025a <nvic_set_priority+0x22>
	{
		ret = RET_ERROR;
 8000254:	2301      	movs	r3, #1
 8000256:	73fb      	strb	r3, [r7, #15]
 8000258:	e008      	b.n	800026c <nvic_set_priority+0x34>
	}
	else
	{
		/*set priority of the interrupt */
		NVIC->IPR[IRQNum] = (priority << 4U);
 800025a:	4907      	ldr	r1, [pc, #28]	; (8000278 <nvic_set_priority+0x40>)
 800025c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000260:	79ba      	ldrb	r2, [r7, #6]
 8000262:	0112      	lsls	r2, r2, #4
 8000264:	b2d2      	uxtb	r2, r2
 8000266:	440b      	add	r3, r1
 8000268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
	}
	return ret;
 800026c:	7bfb      	ldrb	r3, [r7, #15]
}
 800026e:	4618      	mov	r0, r3
 8000270:	3714      	adds	r7, #20
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr
 8000278:	e000e100 	.word	0xe000e100

0800027c <scb_set_priority_group>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t scb_set_priority_group(uint32_t priority_group)
{
 800027c:	b480      	push	{r7}
 800027e:	b085      	sub	sp, #20
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	Std_RetType_t ret = RET_OK ;
 8000284:	2300      	movs	r3, #0
 8000286:	73fb      	strb	r3, [r7, #15]
	if((GROUP_PRIORITIES_8_SUB_PRIORITIES_2==priority_group)||(GROUP_PRIORITIES_4_SUB_PRIORITIES_4==priority_group)||(GROUP_PRIORITIES_2_SUB_PRIORITIES_8==priority_group)||(GROUP_PRIORITIES_1_SUB_PRIORITIES_16==priority_group))
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4a0e      	ldr	r2, [pc, #56]	; (80002c4 <scb_set_priority_group+0x48>)
 800028c:	4293      	cmp	r3, r2
 800028e:	d00b      	beq.n	80002a8 <scb_set_priority_group+0x2c>
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	4a0d      	ldr	r2, [pc, #52]	; (80002c8 <scb_set_priority_group+0x4c>)
 8000294:	4293      	cmp	r3, r2
 8000296:	d007      	beq.n	80002a8 <scb_set_priority_group+0x2c>
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	4a0c      	ldr	r2, [pc, #48]	; (80002cc <scb_set_priority_group+0x50>)
 800029c:	4293      	cmp	r3, r2
 800029e:	d003      	beq.n	80002a8 <scb_set_priority_group+0x2c>
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	4a0b      	ldr	r2, [pc, #44]	; (80002d0 <scb_set_priority_group+0x54>)
 80002a4:	4293      	cmp	r3, r2
 80002a6:	d104      	bne.n	80002b2 <scb_set_priority_group+0x36>
	{
		SCB->AIRCR = priority_group;
 80002a8:	4a0a      	ldr	r2, [pc, #40]	; (80002d4 <scb_set_priority_group+0x58>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f8c2 3d04 	str.w	r3, [r2, #3332]	; 0xd04
 80002b0:	e001      	b.n	80002b6 <scb_set_priority_group+0x3a>
	}
	else
	{
		ret = RET_ERROR;
 80002b2:	2301      	movs	r3, #1
 80002b4:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 80002b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002b8:	4618      	mov	r0, r3
 80002ba:	3714      	adds	r7, #20
 80002bc:	46bd      	mov	sp, r7
 80002be:	bc80      	pop	{r7}
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	05fa0400 	.word	0x05fa0400
 80002c8:	05fa0500 	.word	0x05fa0500
 80002cc:	05fa0600 	.word	0x05fa0600
 80002d0:	05fa0700 	.word	0x05fa0700
 80002d4:	e000e008 	.word	0xe000e008

080002d8 <Systick_init>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t Systick_init(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
	uint32_t NO_Tick = 0x00ffffff;
 80002de:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80002e2:	603b      	str	r3, [r7, #0]
	Std_RetType_t ret = RET_OK;
 80002e4:	2300      	movs	r3, #0
 80002e6:	71fb      	strb	r3, [r7, #7]
	if(NO_Tick > (STSTICK_LOAD_VALUE_POS << STSTICK_LOAD_VALUE_ACCESS)) /*resolution = 2^n = 2^24 = 16,777,216 = 1<<24*/
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80002ee:	d902      	bls.n	80002f6 <Systick_init+0x1e>
	{
		ret = RET_ERROR;
 80002f0:	2301      	movs	r3, #1
 80002f2:	71fb      	strb	r3, [r7, #7]
 80002f4:	e011      	b.n	800031a <Systick_init+0x42>
	}
	else
	{
		/*Disable the SYSTICK counter*/
		SYSTICK->CSR &=~ (SYSTICK_CSR_ENABLE_MASK << SYSTICK_CSR_ENABLE_POS);
 80002f6:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <Systick_init+0x50>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a0b      	ldr	r2, [pc, #44]	; (8000328 <Systick_init+0x50>)
 80002fc:	f023 0301 	bic.w	r3, r3, #1
 8000300:	6013      	str	r3, [r2, #0]
		/*load the value into SYST_CVR in the range 0x00000001-0x00FFFFFF*/
		SYSTICK->RVR = NO_Tick;
 8000302:	4a09      	ldr	r2, [pc, #36]	; (8000328 <Systick_init+0x50>)
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	6053      	str	r3, [r2, #4]
		/*clear the SYSTICK counter value*/
		SYSTICK->CVR = 0;
 8000308:	4b07      	ldr	r3, [pc, #28]	; (8000328 <Systick_init+0x50>)
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]
		/*Indicates the clock source: (0) = external clock , (1) = processor clock*/
#if SYSTICK_CLOCK_SOURCE==SYSTICK_CLOCK_SOURCE_DIV_1
		SYSTICK->CSR |= (SYSTICK_CSR_CLOCK_MASK<<SYSTICK_CSR_CLOCK_POS);
 800030e:	4b06      	ldr	r3, [pc, #24]	; (8000328 <Systick_init+0x50>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a05      	ldr	r2, [pc, #20]	; (8000328 <Systick_init+0x50>)
 8000314:	f043 0304 	orr.w	r3, r3, #4
 8000318:	6013      	str	r3, [r2, #0]
#elif SYSTICK_CLOCK_SOURCE==SYSTICK_CLOCK_SOURCE_DIV_8
		SYSTICK->CSR &=~(SYSTICK_CSR_CLOCK_MASK<<SYSTICK_CSR_CLOCK_POS);
#else
#endif
	}
	return ret;
 800031a:	79fb      	ldrb	r3, [r7, #7]
}
 800031c:	4618      	mov	r0, r3
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	bc80      	pop	{r7}
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	e000e010 	.word	0xe000e010

0800032c <Systick_Wait_Blocking>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t Systick_Wait_Blocking(uint32_t NO_Tick)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
	Std_RetType_t ret = RET_OK;
 8000334:	2300      	movs	r3, #0
 8000336:	73fb      	strb	r3, [r7, #15]
	if(NO_Tick > (STSTICK_LOAD_VALUE_POS << STSTICK_LOAD_VALUE_ACCESS)) /*resolution = 2^n = 2^24 = 16,777,216 = 1<<24*/
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800033e:	d902      	bls.n	8000346 <Systick_Wait_Blocking+0x1a>
	{
		ret = RET_ERROR;
 8000340:	2301      	movs	r3, #1
 8000342:	73fb      	strb	r3, [r7, #15]
 8000344:	e012      	b.n	800036c <Systick_Wait_Blocking+0x40>
	}
	else
	{
		/*load the value into SYST_CVR in the range 0x00000001-0x00FFFFFF*/
		SYSTICK->RVR = NO_Tick;
 8000346:	4a0c      	ldr	r2, [pc, #48]	; (8000378 <Systick_Wait_Blocking+0x4c>)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	6053      	str	r3, [r2, #4]
		/*Enable the SYSTICK counter*/
		SYSTICK->CSR |= (SYSTICK_CSR_ENABLE_MASK << SYSTICK_CSR_ENABLE_POS);
 800034c:	4b0a      	ldr	r3, [pc, #40]	; (8000378 <Systick_Wait_Blocking+0x4c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a09      	ldr	r2, [pc, #36]	; (8000378 <Systick_Wait_Blocking+0x4c>)
 8000352:	f043 0301 	orr.w	r3, r3, #1
 8000356:	6013      	str	r3, [r2, #0]
		/*COUNTFLAG Returns 1 if timer counted to 0 since last time this was read*/
		while((SYSTICK->CSR &(SYSTICK_CSR_COUNTFLAG_MASK<<SYSTICK_CSR_COUNTFLAG_POS)) == 0);
 8000358:	bf00      	nop
 800035a:	4b07      	ldr	r3, [pc, #28]	; (8000378 <Systick_Wait_Blocking+0x4c>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000362:	2b00      	cmp	r3, #0
 8000364:	d0f9      	beq.n	800035a <Systick_Wait_Blocking+0x2e>
		/*clear the SYSTICK counter value*/
		SYSTICK->CVR = 0;
 8000366:	4b04      	ldr	r3, [pc, #16]	; (8000378 <Systick_Wait_Blocking+0x4c>)
 8000368:	2200      	movs	r2, #0
 800036a:	609a      	str	r2, [r3, #8]
	}
	return ret;
 800036c:	7bfb      	ldrb	r3, [r7, #15]
}
 800036e:	4618      	mov	r0, r3
 8000370:	3714      	adds	r7, #20
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr
 8000378:	e000e010 	.word	0xe000e010

0800037c <delay_ms>:
 * @param  : (ms) : number of Millie seconds
 * @return :
 *
 */
void delay_ms(uint32_t ms)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b084      	sub	sp, #16
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
	if(ms > 0)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d00c      	beq.n	80003a4 <delay_ms+0x28>
	{
		uint32_t number_of_ms = ms;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	60fb      	str	r3, [r7, #12]
		while(number_of_ms > 0)
 800038e:	e006      	b.n	800039e <delay_ms+0x22>
		{
			Systick_Wait_Blocking(0x4189);	/*0x4189 = 1ms*/
 8000390:	f244 1089 	movw	r0, #16777	; 0x4189
 8000394:	f7ff ffca 	bl	800032c <Systick_Wait_Blocking>
			number_of_ms--;
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	3b01      	subs	r3, #1
 800039c:	60fb      	str	r3, [r7, #12]
		while(number_of_ms > 0)
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1f5      	bne.n	8000390 <delay_ms+0x14>
		}
	}
}
 80003a4:	bf00      	nop
 80003a6:	3710      	adds	r7, #16
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}

080003ac <EXTI_initialize>:
static void (* EXTI_Handler[EXTI_MAX_NUMBER])(void) ={NULL};
static EXTI_source_t EXTI_source ;


Std_RetType_t EXTI_initialize(const EXTI_config_t* EXTI_object)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
	Std_RetType_t ret = RET_OK;
 80003b4:	2300      	movs	r3, #0
 80003b6:	73fb      	strb	r3, [r7, #15]
	if(NULL == EXTI_object)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d102      	bne.n	80003c4 <EXTI_initialize+0x18>
	{
		ret =  RET_ERROR;
 80003be:	2301      	movs	r3, #1
 80003c0:	73fb      	strb	r3, [r7, #15]
 80003c2:	e045      	b.n	8000450 <EXTI_initialize+0xa4>
	}
	else
	{
		//configure edge
		switch(EXTI_object->EXTI_edge)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	791b      	ldrb	r3, [r3, #4]
 80003c8:	2b02      	cmp	r3, #2
 80003ca:	d01e      	beq.n	800040a <EXTI_initialize+0x5e>
 80003cc:	2b02      	cmp	r3, #2
 80003ce:	dc33      	bgt.n	8000438 <EXTI_initialize+0x8c>
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d002      	beq.n	80003da <EXTI_initialize+0x2e>
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d00c      	beq.n	80003f2 <EXTI_initialize+0x46>
 80003d8:	e02e      	b.n	8000438 <EXTI_initialize+0x8c>
		{
			case RISING_EDGE :
				EXTI->RTSR |= (1 << EXTI_object->source);
 80003da:	4b20      	ldr	r3, [pc, #128]	; (800045c <EXTI_initialize+0xb0>)
 80003dc:	689b      	ldr	r3, [r3, #8]
 80003de:	687a      	ldr	r2, [r7, #4]
 80003e0:	7952      	ldrb	r2, [r2, #5]
 80003e2:	4611      	mov	r1, r2
 80003e4:	2201      	movs	r2, #1
 80003e6:	408a      	lsls	r2, r1
 80003e8:	4611      	mov	r1, r2
 80003ea:	4a1c      	ldr	r2, [pc, #112]	; (800045c <EXTI_initialize+0xb0>)
 80003ec:	430b      	orrs	r3, r1
 80003ee:	6093      	str	r3, [r2, #8]
			break;
 80003f0:	e022      	b.n	8000438 <EXTI_initialize+0x8c>
			case FALLING_EDGE :
				EXTI->FTSR |= (1 << EXTI_object->source);
 80003f2:	4b1a      	ldr	r3, [pc, #104]	; (800045c <EXTI_initialize+0xb0>)
 80003f4:	68db      	ldr	r3, [r3, #12]
 80003f6:	687a      	ldr	r2, [r7, #4]
 80003f8:	7952      	ldrb	r2, [r2, #5]
 80003fa:	4611      	mov	r1, r2
 80003fc:	2201      	movs	r2, #1
 80003fe:	408a      	lsls	r2, r1
 8000400:	4611      	mov	r1, r2
 8000402:	4a16      	ldr	r2, [pc, #88]	; (800045c <EXTI_initialize+0xb0>)
 8000404:	430b      	orrs	r3, r1
 8000406:	60d3      	str	r3, [r2, #12]
			break;
 8000408:	e016      	b.n	8000438 <EXTI_initialize+0x8c>
			case RISING_FALLING_EDGE :
				EXTI->RTSR |= (1 << EXTI_object->source);
 800040a:	4b14      	ldr	r3, [pc, #80]	; (800045c <EXTI_initialize+0xb0>)
 800040c:	689b      	ldr	r3, [r3, #8]
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	7952      	ldrb	r2, [r2, #5]
 8000412:	4611      	mov	r1, r2
 8000414:	2201      	movs	r2, #1
 8000416:	408a      	lsls	r2, r1
 8000418:	4611      	mov	r1, r2
 800041a:	4a10      	ldr	r2, [pc, #64]	; (800045c <EXTI_initialize+0xb0>)
 800041c:	430b      	orrs	r3, r1
 800041e:	6093      	str	r3, [r2, #8]
				EXTI->FTSR |= (1 << EXTI_object->source);
 8000420:	4b0e      	ldr	r3, [pc, #56]	; (800045c <EXTI_initialize+0xb0>)
 8000422:	68db      	ldr	r3, [r3, #12]
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	7952      	ldrb	r2, [r2, #5]
 8000428:	4611      	mov	r1, r2
 800042a:	2201      	movs	r2, #1
 800042c:	408a      	lsls	r2, r1
 800042e:	4611      	mov	r1, r2
 8000430:	4a0a      	ldr	r2, [pc, #40]	; (800045c <EXTI_initialize+0xb0>)
 8000432:	430b      	orrs	r3, r1
 8000434:	60d3      	str	r3, [r2, #12]
			break;
 8000436:	bf00      	nop
		}
		// initiate call back
		EXTI_Handler[EXTI_object->source] = EXTI_object->EXTI_handler;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	795b      	ldrb	r3, [r3, #5]
 800043c:	4619      	mov	r1, r3
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a07      	ldr	r2, [pc, #28]	; (8000460 <EXTI_initialize+0xb4>)
 8000444:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		// initiate EXTI_source
		EXTI_source = EXTI_object->source;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	795a      	ldrb	r2, [r3, #5]
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <EXTI_initialize+0xb8>)
 800044e:	701a      	strb	r2, [r3, #0]
	}
	return ret;
 8000450:	7bfb      	ldrb	r3, [r7, #15]
}
 8000452:	4618      	mov	r0, r3
 8000454:	3714      	adds	r7, #20
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr
 800045c:	40013c00 	.word	0x40013c00
 8000460:	2000004c 	.word	0x2000004c
 8000464:	200000a8 	.word	0x200000a8

08000468 <EXTI_enable>:
Std_RetType_t EXTI_enable(EXTI_source_t EXTI_source)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	71fb      	strb	r3, [r7, #7]
	EXTI->IMR |= (1 << EXTI_source);
 8000472:	4b08      	ldr	r3, [pc, #32]	; (8000494 <EXTI_enable+0x2c>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	79fa      	ldrb	r2, [r7, #7]
 8000478:	2101      	movs	r1, #1
 800047a:	fa01 f202 	lsl.w	r2, r1, r2
 800047e:	4611      	mov	r1, r2
 8000480:	4a04      	ldr	r2, [pc, #16]	; (8000494 <EXTI_enable+0x2c>)
 8000482:	430b      	orrs	r3, r1
 8000484:	6013      	str	r3, [r2, #0]
	return RET_OK;
 8000486:	2300      	movs	r3, #0
}
 8000488:	4618      	mov	r0, r3
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	bc80      	pop	{r7}
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	40013c00 	.word	0x40013c00

08000498 <EXTI_set_pending_flag>:
	EXTI->IMR &= ~(1 << EXTI_source);
	return RET_OK;
}

Std_RetType_t EXTI_set_pending_flag(const EXTI_config_t* EXTI_object)
{
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	Std_RetType_t ret = RET_OK;
 80004a0:	2300      	movs	r3, #0
 80004a2:	73fb      	strb	r3, [r7, #15]
	if(NULL == EXTI_object)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d102      	bne.n	80004b0 <EXTI_set_pending_flag+0x18>
	{
		ret =  RET_ERROR;
 80004aa:	2301      	movs	r3, #1
 80004ac:	73fb      	strb	r3, [r7, #15]
 80004ae:	e00a      	b.n	80004c6 <EXTI_set_pending_flag+0x2e>
	}
	else
	{
		EXTI->SWIER |= (1 << EXTI_object->source);
 80004b0:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <EXTI_set_pending_flag+0x3c>)
 80004b2:	691b      	ldr	r3, [r3, #16]
 80004b4:	687a      	ldr	r2, [r7, #4]
 80004b6:	7952      	ldrb	r2, [r2, #5]
 80004b8:	4611      	mov	r1, r2
 80004ba:	2201      	movs	r2, #1
 80004bc:	408a      	lsls	r2, r1
 80004be:	4611      	mov	r1, r2
 80004c0:	4a04      	ldr	r2, [pc, #16]	; (80004d4 <EXTI_set_pending_flag+0x3c>)
 80004c2:	430b      	orrs	r3, r1
 80004c4:	6113      	str	r3, [r2, #16]
	}
	return ret;
 80004c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3714      	adds	r7, #20
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	40013c00 	.word	0x40013c00

080004d8 <EXTI_clear_pending_flag>:
Std_RetType_t EXTI_clear_pending_flag(EXTI_source_t EXTI_source)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
	// clearing pending flag is done by programming the bit to '1'
	EXTI->PR |= (1 << EXTI_source);
 80004e2:	4b08      	ldr	r3, [pc, #32]	; (8000504 <EXTI_clear_pending_flag+0x2c>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	79fa      	ldrb	r2, [r7, #7]
 80004e8:	2101      	movs	r1, #1
 80004ea:	fa01 f202 	lsl.w	r2, r1, r2
 80004ee:	4611      	mov	r1, r2
 80004f0:	4a04      	ldr	r2, [pc, #16]	; (8000504 <EXTI_clear_pending_flag+0x2c>)
 80004f2:	430b      	orrs	r3, r1
 80004f4:	6153      	str	r3, [r2, #20]
	return RET_OK;
 80004f6:	2300      	movs	r3, #0
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	40013c00 	.word	0x40013c00

08000508 <EXTI_read_pending_flag>:
Std_RetType_t EXTI_read_pending_flag(EXTI_source_t EXTI_source, pending_flag_t* pending_flag)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	6039      	str	r1, [r7, #0]
 8000512:	71fb      	strb	r3, [r7, #7]

	*pending_flag = EXTI->PR & (1 << EXTI_source) ? INT_TRIGGERED : INT_NOT_TRIGGERED;
 8000514:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <EXTI_read_pending_flag+0x38>)
 8000516:	695b      	ldr	r3, [r3, #20]
 8000518:	79fa      	ldrb	r2, [r7, #7]
 800051a:	2101      	movs	r1, #1
 800051c:	fa01 f202 	lsl.w	r2, r1, r2
 8000520:	4013      	ands	r3, r2
 8000522:	2b00      	cmp	r3, #0
 8000524:	bf14      	ite	ne
 8000526:	2301      	movne	r3, #1
 8000528:	2300      	moveq	r3, #0
 800052a:	b2db      	uxtb	r3, r3
 800052c:	461a      	mov	r2, r3
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	701a      	strb	r2, [r3, #0]
	return RET_OK;
 8000532:	2300      	movs	r3, #0
}
 8000534:	4618      	mov	r0, r3
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	40013c00 	.word	0x40013c00

08000544 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 8000548:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <EXTI0_IRQHandler+0x30>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	4618      	mov	r0, r3
 800054e:	f7ff ffc3 	bl	80004d8 <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 8000552:	4b08      	ldr	r3, [pc, #32]	; (8000574 <EXTI0_IRQHandler+0x30>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	461a      	mov	r2, r3
 8000558:	4b07      	ldr	r3, [pc, #28]	; (8000578 <EXTI0_IRQHandler+0x34>)
 800055a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d006      	beq.n	8000570 <EXTI0_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 8000562:	4b04      	ldr	r3, [pc, #16]	; (8000574 <EXTI0_IRQHandler+0x30>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	461a      	mov	r2, r3
 8000568:	4b03      	ldr	r3, [pc, #12]	; (8000578 <EXTI0_IRQHandler+0x34>)
 800056a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800056e:	4798      	blx	r3
	}
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	200000a8 	.word	0x200000a8
 8000578:	2000004c 	.word	0x2000004c

0800057c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 8000580:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <EXTI1_IRQHandler+0x30>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ffa7 	bl	80004d8 <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 800058a:	4b08      	ldr	r3, [pc, #32]	; (80005ac <EXTI1_IRQHandler+0x30>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	461a      	mov	r2, r3
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <EXTI1_IRQHandler+0x34>)
 8000592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d006      	beq.n	80005a8 <EXTI1_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 800059a:	4b04      	ldr	r3, [pc, #16]	; (80005ac <EXTI1_IRQHandler+0x30>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	461a      	mov	r2, r3
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <EXTI1_IRQHandler+0x34>)
 80005a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005a6:	4798      	blx	r3
	}
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	200000a8 	.word	0x200000a8
 80005b0:	2000004c 	.word	0x2000004c

080005b4 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 80005b8:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <EXTI2_IRQHandler+0x30>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff ff8b 	bl	80004d8 <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 80005c2:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <EXTI2_IRQHandler+0x30>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <EXTI2_IRQHandler+0x34>)
 80005ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d006      	beq.n	80005e0 <EXTI2_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 80005d2:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <EXTI2_IRQHandler+0x30>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	461a      	mov	r2, r3
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <EXTI2_IRQHandler+0x34>)
 80005da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005de:	4798      	blx	r3
	}
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	200000a8 	.word	0x200000a8
 80005e8:	2000004c 	.word	0x2000004c

080005ec <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 80005f0:	4b0a      	ldr	r3, [pc, #40]	; (800061c <EXTI3_IRQHandler+0x30>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ff6f 	bl	80004d8 <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <EXTI3_IRQHandler+0x30>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	461a      	mov	r2, r3
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <EXTI3_IRQHandler+0x34>)
 8000602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d006      	beq.n	8000618 <EXTI3_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 800060a:	4b04      	ldr	r3, [pc, #16]	; (800061c <EXTI3_IRQHandler+0x30>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	461a      	mov	r2, r3
 8000610:	4b03      	ldr	r3, [pc, #12]	; (8000620 <EXTI3_IRQHandler+0x34>)
 8000612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000616:	4798      	blx	r3
	}
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	200000a8 	.word	0x200000a8
 8000620:	2000004c 	.word	0x2000004c

08000624 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <EXTI4_IRQHandler+0x30>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ff53 	bl	80004d8 <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <EXTI4_IRQHandler+0x30>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	461a      	mov	r2, r3
 8000638:	4b07      	ldr	r3, [pc, #28]	; (8000658 <EXTI4_IRQHandler+0x34>)
 800063a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d006      	beq.n	8000650 <EXTI4_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 8000642:	4b04      	ldr	r3, [pc, #16]	; (8000654 <EXTI4_IRQHandler+0x30>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	461a      	mov	r2, r3
 8000648:	4b03      	ldr	r3, [pc, #12]	; (8000658 <EXTI4_IRQHandler+0x34>)
 800064a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800064e:	4798      	blx	r3
	}
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200000a8 	.word	0x200000a8
 8000658:	2000004c 	.word	0x2000004c

0800065c <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
	pending_flag_t flag = INT_NOT_TRIGGERED;
 8000662:	2300      	movs	r3, #0
 8000664:	71fb      	strb	r3, [r7, #7]
	EXTI_read_pending_flag(EXTI_5 , &flag);
 8000666:	1dfb      	adds	r3, r7, #7
 8000668:	4619      	mov	r1, r3
 800066a:	2005      	movs	r0, #5
 800066c:	f7ff ff4c 	bl	8000508 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d113      	bne.n	800069e <EXTI9_5_IRQHandler+0x42>
	{
		EXTI_clear_pending_flag(EXTI_5);
 8000676:	2005      	movs	r0, #5
 8000678:	f7ff ff2e 	bl	80004d8 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 800067c:	4b42      	ldr	r3, [pc, #264]	; (8000788 <EXTI9_5_IRQHandler+0x12c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	4b42      	ldr	r3, [pc, #264]	; (800078c <EXTI9_5_IRQHandler+0x130>)
 8000684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d006      	beq.n	800069a <EXTI9_5_IRQHandler+0x3e>
		{
			EXTI_Handler[EXTI_source]();
 800068c:	4b3e      	ldr	r3, [pc, #248]	; (8000788 <EXTI9_5_IRQHandler+0x12c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	461a      	mov	r2, r3
 8000692:	4b3e      	ldr	r3, [pc, #248]	; (800078c <EXTI9_5_IRQHandler+0x130>)
 8000694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000698:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 800069a:	2300      	movs	r3, #0
 800069c:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_6 , &flag);
 800069e:	1dfb      	adds	r3, r7, #7
 80006a0:	4619      	mov	r1, r3
 80006a2:	2006      	movs	r0, #6
 80006a4:	f7ff ff30 	bl	8000508 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d113      	bne.n	80006d6 <EXTI9_5_IRQHandler+0x7a>
	{
		EXTI_clear_pending_flag(EXTI_6);
 80006ae:	2006      	movs	r0, #6
 80006b0:	f7ff ff12 	bl	80004d8 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 80006b4:	4b34      	ldr	r3, [pc, #208]	; (8000788 <EXTI9_5_IRQHandler+0x12c>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b34      	ldr	r3, [pc, #208]	; (800078c <EXTI9_5_IRQHandler+0x130>)
 80006bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d006      	beq.n	80006d2 <EXTI9_5_IRQHandler+0x76>
		{
			EXTI_Handler[EXTI_source]();
 80006c4:	4b30      	ldr	r3, [pc, #192]	; (8000788 <EXTI9_5_IRQHandler+0x12c>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b30      	ldr	r3, [pc, #192]	; (800078c <EXTI9_5_IRQHandler+0x130>)
 80006cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006d0:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 80006d2:	2300      	movs	r3, #0
 80006d4:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_7 , &flag);
 80006d6:	1dfb      	adds	r3, r7, #7
 80006d8:	4619      	mov	r1, r3
 80006da:	2007      	movs	r0, #7
 80006dc:	f7ff ff14 	bl	8000508 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d113      	bne.n	800070e <EXTI9_5_IRQHandler+0xb2>
	{
		EXTI_clear_pending_flag(EXTI_7);
 80006e6:	2007      	movs	r0, #7
 80006e8:	f7ff fef6 	bl	80004d8 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 80006ec:	4b26      	ldr	r3, [pc, #152]	; (8000788 <EXTI9_5_IRQHandler+0x12c>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	461a      	mov	r2, r3
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <EXTI9_5_IRQHandler+0x130>)
 80006f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d006      	beq.n	800070a <EXTI9_5_IRQHandler+0xae>
		{
			EXTI_Handler[EXTI_source]();
 80006fc:	4b22      	ldr	r3, [pc, #136]	; (8000788 <EXTI9_5_IRQHandler+0x12c>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	461a      	mov	r2, r3
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <EXTI9_5_IRQHandler+0x130>)
 8000704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000708:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 800070a:	2300      	movs	r3, #0
 800070c:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_8 , &flag);
 800070e:	1dfb      	adds	r3, r7, #7
 8000710:	4619      	mov	r1, r3
 8000712:	2008      	movs	r0, #8
 8000714:	f7ff fef8 	bl	8000508 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d113      	bne.n	8000746 <EXTI9_5_IRQHandler+0xea>
	{
		EXTI_clear_pending_flag(EXTI_8);
 800071e:	2008      	movs	r0, #8
 8000720:	f7ff feda 	bl	80004d8 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <EXTI9_5_IRQHandler+0x12c>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	461a      	mov	r2, r3
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <EXTI9_5_IRQHandler+0x130>)
 800072c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d006      	beq.n	8000742 <EXTI9_5_IRQHandler+0xe6>
		{
			EXTI_Handler[EXTI_source]();
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <EXTI9_5_IRQHandler+0x12c>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <EXTI9_5_IRQHandler+0x130>)
 800073c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000740:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 8000742:	2300      	movs	r3, #0
 8000744:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_9 , &flag);
 8000746:	1dfb      	adds	r3, r7, #7
 8000748:	4619      	mov	r1, r3
 800074a:	2009      	movs	r0, #9
 800074c:	f7ff fedc 	bl	8000508 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d113      	bne.n	800077e <EXTI9_5_IRQHandler+0x122>
	{
		EXTI_clear_pending_flag(EXTI_9);
 8000756:	2009      	movs	r0, #9
 8000758:	f7ff febe 	bl	80004d8 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <EXTI9_5_IRQHandler+0x12c>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	461a      	mov	r2, r3
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <EXTI9_5_IRQHandler+0x130>)
 8000764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d006      	beq.n	800077a <EXTI9_5_IRQHandler+0x11e>
		{
			EXTI_Handler[EXTI_source]();
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <EXTI9_5_IRQHandler+0x12c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <EXTI9_5_IRQHandler+0x130>)
 8000774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000778:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 800077a:	2300      	movs	r3, #0
 800077c:	71fb      	strb	r3, [r7, #7]
	}
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000a8 	.word	0x200000a8
 800078c:	2000004c 	.word	0x2000004c

08000790 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
	pending_flag_t flag = INT_NOT_TRIGGERED;
 8000796:	2300      	movs	r3, #0
 8000798:	71fb      	strb	r3, [r7, #7]
	EXTI_read_pending_flag(EXTI_10 , &flag);
 800079a:	1dfb      	adds	r3, r7, #7
 800079c:	4619      	mov	r1, r3
 800079e:	200a      	movs	r0, #10
 80007a0:	f7ff feb2 	bl	8000508 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d113      	bne.n	80007d2 <EXTI15_10_IRQHandler+0x42>
	{
		EXTI_clear_pending_flag(EXTI_10);
 80007aa:	200a      	movs	r0, #10
 80007ac:	f7ff fe94 	bl	80004d8 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 80007b0:	4b50      	ldr	r3, [pc, #320]	; (80008f4 <EXTI15_10_IRQHandler+0x164>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b50      	ldr	r3, [pc, #320]	; (80008f8 <EXTI15_10_IRQHandler+0x168>)
 80007b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d006      	beq.n	80007ce <EXTI15_10_IRQHandler+0x3e>
		{
			EXTI_Handler[EXTI_source]();
 80007c0:	4b4c      	ldr	r3, [pc, #304]	; (80008f4 <EXTI15_10_IRQHandler+0x164>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	4b4c      	ldr	r3, [pc, #304]	; (80008f8 <EXTI15_10_IRQHandler+0x168>)
 80007c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007cc:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 80007ce:	2300      	movs	r3, #0
 80007d0:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_11 , &flag);
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	4619      	mov	r1, r3
 80007d6:	200b      	movs	r0, #11
 80007d8:	f7ff fe96 	bl	8000508 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d113      	bne.n	800080a <EXTI15_10_IRQHandler+0x7a>
	{
		EXTI_clear_pending_flag(EXTI_11);
 80007e2:	200b      	movs	r0, #11
 80007e4:	f7ff fe78 	bl	80004d8 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 80007e8:	4b42      	ldr	r3, [pc, #264]	; (80008f4 <EXTI15_10_IRQHandler+0x164>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b42      	ldr	r3, [pc, #264]	; (80008f8 <EXTI15_10_IRQHandler+0x168>)
 80007f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d006      	beq.n	8000806 <EXTI15_10_IRQHandler+0x76>
		{
			EXTI_Handler[EXTI_source]();
 80007f8:	4b3e      	ldr	r3, [pc, #248]	; (80008f4 <EXTI15_10_IRQHandler+0x164>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b3e      	ldr	r3, [pc, #248]	; (80008f8 <EXTI15_10_IRQHandler+0x168>)
 8000800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000804:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 8000806:	2300      	movs	r3, #0
 8000808:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_12 , &flag);
 800080a:	1dfb      	adds	r3, r7, #7
 800080c:	4619      	mov	r1, r3
 800080e:	200c      	movs	r0, #12
 8000810:	f7ff fe7a 	bl	8000508 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d113      	bne.n	8000842 <EXTI15_10_IRQHandler+0xb2>
	{
		EXTI_clear_pending_flag(EXTI_12);
 800081a:	200c      	movs	r0, #12
 800081c:	f7ff fe5c 	bl	80004d8 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 8000820:	4b34      	ldr	r3, [pc, #208]	; (80008f4 <EXTI15_10_IRQHandler+0x164>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	461a      	mov	r2, r3
 8000826:	4b34      	ldr	r3, [pc, #208]	; (80008f8 <EXTI15_10_IRQHandler+0x168>)
 8000828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d006      	beq.n	800083e <EXTI15_10_IRQHandler+0xae>
		{
			EXTI_Handler[EXTI_source]();
 8000830:	4b30      	ldr	r3, [pc, #192]	; (80008f4 <EXTI15_10_IRQHandler+0x164>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4b30      	ldr	r3, [pc, #192]	; (80008f8 <EXTI15_10_IRQHandler+0x168>)
 8000838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800083c:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 800083e:	2300      	movs	r3, #0
 8000840:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_13 , &flag);
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	4619      	mov	r1, r3
 8000846:	200d      	movs	r0, #13
 8000848:	f7ff fe5e 	bl	8000508 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d113      	bne.n	800087a <EXTI15_10_IRQHandler+0xea>
	{
		EXTI_clear_pending_flag(EXTI_13);
 8000852:	200d      	movs	r0, #13
 8000854:	f7ff fe40 	bl	80004d8 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 8000858:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <EXTI15_10_IRQHandler+0x164>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	461a      	mov	r2, r3
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <EXTI15_10_IRQHandler+0x168>)
 8000860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d006      	beq.n	8000876 <EXTI15_10_IRQHandler+0xe6>
		{
			EXTI_Handler[EXTI_source]();
 8000868:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <EXTI15_10_IRQHandler+0x164>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	461a      	mov	r2, r3
 800086e:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <EXTI15_10_IRQHandler+0x168>)
 8000870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000874:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 8000876:	2300      	movs	r3, #0
 8000878:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_14 , &flag);
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	4619      	mov	r1, r3
 800087e:	200e      	movs	r0, #14
 8000880:	f7ff fe42 	bl	8000508 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d113      	bne.n	80008b2 <EXTI15_10_IRQHandler+0x122>
	{
		EXTI_clear_pending_flag(EXTI_14);
 800088a:	200e      	movs	r0, #14
 800088c:	f7ff fe24 	bl	80004d8 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <EXTI15_10_IRQHandler+0x164>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <EXTI15_10_IRQHandler+0x168>)
 8000898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d006      	beq.n	80008ae <EXTI15_10_IRQHandler+0x11e>
		{
			EXTI_Handler[EXTI_source]();
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <EXTI15_10_IRQHandler+0x164>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <EXTI15_10_IRQHandler+0x168>)
 80008a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ac:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 80008ae:	2300      	movs	r3, #0
 80008b0:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_15 , &flag);
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	4619      	mov	r1, r3
 80008b6:	200f      	movs	r0, #15
 80008b8:	f7ff fe26 	bl	8000508 <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d113      	bne.n	80008ea <EXTI15_10_IRQHandler+0x15a>
	{
		EXTI_clear_pending_flag(EXTI_15);
 80008c2:	200f      	movs	r0, #15
 80008c4:	f7ff fe08 	bl	80004d8 <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <EXTI15_10_IRQHandler+0x164>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <EXTI15_10_IRQHandler+0x168>)
 80008d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d006      	beq.n	80008e6 <EXTI15_10_IRQHandler+0x156>
		{
			EXTI_Handler[EXTI_source]();
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <EXTI15_10_IRQHandler+0x164>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	461a      	mov	r2, r3
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <EXTI15_10_IRQHandler+0x168>)
 80008e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008e4:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 80008e6:	2300      	movs	r3, #0
 80008e8:	71fb      	strb	r3, [r7, #7]
	}
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200000a8 	.word	0x200000a8
 80008f8:	2000004c 	.word	0x2000004c

080008fc <GPIO_Pin_init>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t GPIO_Pin_init(const PinConfig_t *pinConfig)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	Std_RetType_t ret = RET_OK;
 8000904:	2300      	movs	r3, #0
 8000906:	73fb      	strb	r3, [r7, #15]
	if(NULL == pinConfig)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d102      	bne.n	8000914 <GPIO_Pin_init+0x18>
	{
		ret = RET_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	73fb      	strb	r3, [r7, #15]
 8000912:	e108      	b.n	8000b26 <GPIO_Pin_init+0x22a>
	}
	else
	{
		/*select gpio mode */
		/*clear the mode bits*/
		(GPIO_PORT[pinConfig->Port]->MODER) &=~(MODER_MASK << (pinConfig->Pin*MODER_PIN_ACCESS));
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b86      	ldr	r3, [pc, #536]	; (8000b34 <GPIO_Pin_init+0x238>)
 800091c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	785b      	ldrb	r3, [r3, #1]
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	2103      	movs	r1, #3
 800092a:	fa01 f303 	lsl.w	r3, r1, r3
 800092e:	43db      	mvns	r3, r3
 8000930:	4619      	mov	r1, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	4618      	mov	r0, r3
 8000938:	4b7e      	ldr	r3, [pc, #504]	; (8000b34 <GPIO_Pin_init+0x238>)
 800093a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800093e:	400a      	ands	r2, r1
 8000940:	601a      	str	r2, [r3, #0]
		/*set the mode bits*/
		(GPIO_PORT[pinConfig->Port]->MODER) |= ((pinConfig->Mode)<<(pinConfig->Pin*MODER_PIN_ACCESS));
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	461a      	mov	r2, r3
 8000948:	4b7a      	ldr	r3, [pc, #488]	; (8000b34 <GPIO_Pin_init+0x238>)
 800094a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	789b      	ldrb	r3, [r3, #2]
 8000954:	4619      	mov	r1, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	785b      	ldrb	r3, [r3, #1]
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	fa01 f303 	lsl.w	r3, r1, r3
 8000960:	4619      	mov	r1, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	4618      	mov	r0, r3
 8000968:	4b72      	ldr	r3, [pc, #456]	; (8000b34 <GPIO_Pin_init+0x238>)
 800096a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800096e:	430a      	orrs	r2, r1
 8000970:	601a      	str	r2, [r3, #0]

		/*select gpio pull state */
		/*clear the PUPDR bits*/
		(GPIO_PORT[pinConfig->Port]->PUPDR) &=~(PUPDR_MASK << (pinConfig->Pin)*PUPDR_PIN_ACCESS);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	461a      	mov	r2, r3
 8000978:	4b6e      	ldr	r3, [pc, #440]	; (8000b34 <GPIO_Pin_init+0x238>)
 800097a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800097e:	68da      	ldr	r2, [r3, #12]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	785b      	ldrb	r3, [r3, #1]
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	2103      	movs	r1, #3
 8000988:	fa01 f303 	lsl.w	r3, r1, r3
 800098c:	43db      	mvns	r3, r3
 800098e:	4619      	mov	r1, r3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	4b67      	ldr	r3, [pc, #412]	; (8000b34 <GPIO_Pin_init+0x238>)
 8000998:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800099c:	400a      	ands	r2, r1
 800099e:	60da      	str	r2, [r3, #12]
		/*set the PUPDR bits*/
		(GPIO_PORT[pinConfig->Port]->PUPDR) |= ((pinConfig->PullType)<<(pinConfig->Pin*PUPDR_PIN_ACCESS));
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b63      	ldr	r3, [pc, #396]	; (8000b34 <GPIO_Pin_init+0x238>)
 80009a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009ac:	68da      	ldr	r2, [r3, #12]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	795b      	ldrb	r3, [r3, #5]
 80009b2:	4619      	mov	r1, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	785b      	ldrb	r3, [r3, #1]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	fa01 f303 	lsl.w	r3, r1, r3
 80009be:	4619      	mov	r1, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4618      	mov	r0, r3
 80009c6:	4b5b      	ldr	r3, [pc, #364]	; (8000b34 <GPIO_Pin_init+0x238>)
 80009c8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80009cc:	430a      	orrs	r2, r1
 80009ce:	60da      	str	r2, [r3, #12]

		/*select output type & output speed in case of output or alternate function*/
		if(OUTPUT ==pinConfig->Mode || ALTERNATE_FUNCTION ==pinConfig->Mode)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	789b      	ldrb	r3, [r3, #2]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d004      	beq.n	80009e2 <GPIO_Pin_init+0xe6>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	789b      	ldrb	r3, [r3, #2]
 80009dc:	2b02      	cmp	r3, #2
 80009de:	f040 80a2 	bne.w	8000b26 <GPIO_Pin_init+0x22a>
		{
			/*select output type {push pull , open drain}*/
			/*clear the OTYPER bit*/
			(GPIO_PORT[pinConfig->Port]->OTYPER) &=~ (OTYPER_MASK<< pinConfig->Pin);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	461a      	mov	r2, r3
 80009e8:	4b52      	ldr	r3, [pc, #328]	; (8000b34 <GPIO_Pin_init+0x238>)
 80009ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009ee:	685a      	ldr	r2, [r3, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	785b      	ldrb	r3, [r3, #1]
 80009f4:	4619      	mov	r1, r3
 80009f6:	2301      	movs	r3, #1
 80009f8:	408b      	lsls	r3, r1
 80009fa:	43db      	mvns	r3, r3
 80009fc:	4619      	mov	r1, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	4618      	mov	r0, r3
 8000a04:	4b4b      	ldr	r3, [pc, #300]	; (8000b34 <GPIO_Pin_init+0x238>)
 8000a06:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000a0a:	400a      	ands	r2, r1
 8000a0c:	605a      	str	r2, [r3, #4]
			/*set the OTYPER bit*/
			(GPIO_PORT[pinConfig->Port]->OTYPER) |= ((pinConfig->Type)<<(pinConfig->Pin));
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	461a      	mov	r2, r3
 8000a14:	4b47      	ldr	r3, [pc, #284]	; (8000b34 <GPIO_Pin_init+0x238>)
 8000a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a1a:	685a      	ldr	r2, [r3, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	791b      	ldrb	r3, [r3, #4]
 8000a20:	4619      	mov	r1, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	785b      	ldrb	r3, [r3, #1]
 8000a26:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	4b40      	ldr	r3, [pc, #256]	; (8000b34 <GPIO_Pin_init+0x238>)
 8000a34:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	605a      	str	r2, [r3, #4]

			/*select output speed {low , medium , high , very high}*/
			/*clear the OSPEEDR bits*/
			(GPIO_PORT[pinConfig->Port]->OSPEEDR) &=~(PSPEEDR_MASK << (pinConfig->Pin*PSPEEDR_PIN_ACCESS));
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b3c      	ldr	r3, [pc, #240]	; (8000b34 <GPIO_Pin_init+0x238>)
 8000a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a48:	689a      	ldr	r2, [r3, #8]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	785b      	ldrb	r3, [r3, #1]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	2103      	movs	r1, #3
 8000a52:	fa01 f303 	lsl.w	r3, r1, r3
 8000a56:	43db      	mvns	r3, r3
 8000a58:	4619      	mov	r1, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	4b34      	ldr	r3, [pc, #208]	; (8000b34 <GPIO_Pin_init+0x238>)
 8000a62:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000a66:	400a      	ands	r2, r1
 8000a68:	609a      	str	r2, [r3, #8]
			/*set the OSPEEDR bits*/
			(GPIO_PORT[pinConfig->Port]->OSPEEDR) |= ((pinConfig->Speed) <<(pinConfig->Pin*PSPEEDR_PIN_ACCESS));
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	4b30      	ldr	r3, [pc, #192]	; (8000b34 <GPIO_Pin_init+0x238>)
 8000a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a76:	689a      	ldr	r2, [r3, #8]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	78db      	ldrb	r3, [r3, #3]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	785b      	ldrb	r3, [r3, #1]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	fa01 f303 	lsl.w	r3, r1, r3
 8000a88:	4619      	mov	r1, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <GPIO_Pin_init+0x238>)
 8000a92:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000a96:	430a      	orrs	r2, r1
 8000a98:	609a      	str	r2, [r3, #8]

			if(ALTERNATE_FUNCTION == pinConfig->Mode)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	789b      	ldrb	r3, [r3, #2]
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d141      	bne.n	8000b26 <GPIO_Pin_init+0x22a>
			{
				/*select the pin alternate function*/
				uint8_t l_reg_num = pinConfig->Pin / AFR_PIN_SHIFTING;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	785b      	ldrb	r3, [r3, #1]
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	73bb      	strb	r3, [r7, #14]
				uint8_t l_bit_num = pinConfig->Pin % AFR_PIN_SHIFTING;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	785b      	ldrb	r3, [r3, #1]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	737b      	strb	r3, [r7, #13]
				/*clear the AFR bits*/
				(GPIO_PORT[pinConfig->Port]->AFR[l_reg_num]) &=~(AFR_MASK << (l_bit_num *AFR_PIN_ACCESS));
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <GPIO_Pin_init+0x238>)
 8000abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ac0:	7bba      	ldrb	r2, [r7, #14]
 8000ac2:	3208      	adds	r2, #8
 8000ac4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000ac8:	7b7b      	ldrb	r3, [r7, #13]
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	220f      	movs	r2, #15
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	461a      	mov	r2, r3
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <GPIO_Pin_init+0x238>)
 8000ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ae2:	7bba      	ldrb	r2, [r7, #14]
 8000ae4:	4001      	ands	r1, r0
 8000ae6:	3208      	adds	r2, #8
 8000ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				/*set the AFR bits*/
				(GPIO_PORT[pinConfig->Port]->AFR[l_reg_num]) |= ((pinConfig->AltFunc) << (l_bit_num *AFR_PIN_ACCESS));
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <GPIO_Pin_init+0x238>)
 8000af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000af8:	7bba      	ldrb	r2, [r7, #14]
 8000afa:	3208      	adds	r2, #8
 8000afc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	799b      	ldrb	r3, [r3, #6]
 8000b04:	461a      	mov	r2, r3
 8000b06:	7b7b      	ldrb	r3, [r7, #13]
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	4618      	mov	r0, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <GPIO_Pin_init+0x238>)
 8000b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b1c:	7bba      	ldrb	r2, [r7, #14]
 8000b1e:	4301      	orrs	r1, r0
 8000b20:	3208      	adds	r2, #8
 8000b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}
		}
	}
	return ret;
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000000 	.word	0x20000000

08000b38 <GPIO_Toggle_Pin_Value>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t GPIO_Toggle_Pin_Value(Port_t port , Pin_t pinNum)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	460a      	mov	r2, r1
 8000b42:	71fb      	strb	r3, [r7, #7]
 8000b44:	4613      	mov	r3, r2
 8000b46:	71bb      	strb	r3, [r7, #6]
	Std_RetType_t ret = RET_OK;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	73fb      	strb	r3, [r7, #15]
	if((PORTH < port)|(PIN15 < pinNum))
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	2b05      	cmp	r3, #5
 8000b50:	bf8c      	ite	hi
 8000b52:	2301      	movhi	r3, #1
 8000b54:	2300      	movls	r3, #0
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	79bb      	ldrb	r3, [r7, #6]
 8000b5a:	2b0f      	cmp	r3, #15
 8000b5c:	bf8c      	ite	hi
 8000b5e:	2301      	movhi	r3, #1
 8000b60:	2300      	movls	r3, #0
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	4313      	orrs	r3, r2
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d002      	beq.n	8000b72 <GPIO_Toggle_Pin_Value+0x3a>
	{
		ret = RET_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	73fb      	strb	r3, [r7, #15]
 8000b70:	e00f      	b.n	8000b92 <GPIO_Toggle_Pin_Value+0x5a>
	}
	else
	{
		GPIO_PORT[port]->ODR ^= (1<< pinNum);
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <GPIO_Toggle_Pin_Value+0x68>)
 8000b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b7a:	695a      	ldr	r2, [r3, #20]
 8000b7c:	79bb      	ldrb	r3, [r7, #6]
 8000b7e:	2101      	movs	r1, #1
 8000b80:	fa01 f303 	lsl.w	r3, r1, r3
 8000b84:	4618      	mov	r0, r3
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	4905      	ldr	r1, [pc, #20]	; (8000ba0 <GPIO_Toggle_Pin_Value+0x68>)
 8000b8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b8e:	4042      	eors	r2, r0
 8000b90:	615a      	str	r2, [r3, #20]
		/*GPIO_PORT[port]->BSRR = 1<< (pin +16);  faster*/
	}
	return ret;
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000000 	.word	0x20000000

08000ba4 <HALL_RCC_OscConfig>:


#include "../../../Inc/MCAL/RCC/RCC.h"

Std_RetType_t HALL_RCC_OscConfig(RCC_OscInitTypedef *RCC_OscInitStruct)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	Std_RetType_t ret = RET_OK;
 8000bac:	2300      	movs	r3, #0
 8000bae:	73fb      	strb	r3, [r7, #15]
	if(NULL == RCC_OscInitStruct)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d102      	bne.n	8000bbc <HALL_RCC_OscConfig+0x18>
	{
		ret = RET_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	73fb      	strb	r3, [r7, #15]
 8000bba:	e04a      	b.n	8000c52 <HALL_RCC_OscConfig+0xae>
	}
	else
	{
		if(RCC_OSCILLATORTYPE_HSE == RCC_OscInitStruct->OscillatorType)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d11d      	bne.n	8000c00 <HALL_RCC_OscConfig+0x5c>
		{
			if(RCC_HSE_ON == RCC_OscInitStruct->HSE_State)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d112      	bne.n	8000bf2 <HALL_RCC_OscConfig+0x4e>
			{
				/*HSE oscillator selected as system clock*/
				SET_BIT(RCC->CFGR , RCC_CFGR_SW0_POS);
 8000bcc:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <HALL_RCC_OscConfig+0xbc>)
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	4a23      	ldr	r2, [pc, #140]	; (8000c60 <HALL_RCC_OscConfig+0xbc>)
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	6093      	str	r3, [r2, #8]
				CLEAR_BIT(RCC->CFGR,RCC_CFGR_SW1_POS);
 8000bd8:	4b21      	ldr	r3, [pc, #132]	; (8000c60 <HALL_RCC_OscConfig+0xbc>)
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	4a20      	ldr	r2, [pc, #128]	; (8000c60 <HALL_RCC_OscConfig+0xbc>)
 8000bde:	f023 0302 	bic.w	r3, r3, #2
 8000be2:	6093      	str	r3, [r2, #8]
				/*HSE oscillator ON*/
				SET_BIT(RCC->CR,RCC_CR_HSEON_POS);
 8000be4:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <HALL_RCC_OscConfig+0xbc>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a1d      	ldr	r2, [pc, #116]	; (8000c60 <HALL_RCC_OscConfig+0xbc>)
 8000bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bee:	6013      	str	r3, [r2, #0]
 8000bf0:	e02f      	b.n	8000c52 <HALL_RCC_OscConfig+0xae>
			}
			else
			{
				CLEAR_BIT(RCC->CR,RCC_CR_HSEON_POS);
 8000bf2:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <HALL_RCC_OscConfig+0xbc>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a1a      	ldr	r2, [pc, #104]	; (8000c60 <HALL_RCC_OscConfig+0xbc>)
 8000bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bfc:	6013      	str	r3, [r2, #0]
 8000bfe:	e028      	b.n	8000c52 <HALL_RCC_OscConfig+0xae>
			}
		}
		else if(RCC_OSCILLATORTYPE_HSI == RCC_OscInitStruct->OscillatorType)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d11d      	bne.n	8000c44 <HALL_RCC_OscConfig+0xa0>
		{
			if(RCC_HSI_ON == RCC_OscInitStruct->HSI_State)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d112      	bne.n	8000c36 <HALL_RCC_OscConfig+0x92>
			{
				/*HSI oscillator selected as system clock*/
				CLEAR_BIT(RCC->CFGR,RCC_CFGR_SW0_POS);
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <HALL_RCC_OscConfig+0xbc>)
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <HALL_RCC_OscConfig+0xbc>)
 8000c16:	f023 0301 	bic.w	r3, r3, #1
 8000c1a:	6093      	str	r3, [r2, #8]
				CLEAR_BIT(RCC->CFGR,RCC_CFGR_SW1_POS);
 8000c1c:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <HALL_RCC_OscConfig+0xbc>)
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	4a0f      	ldr	r2, [pc, #60]	; (8000c60 <HALL_RCC_OscConfig+0xbc>)
 8000c22:	f023 0302 	bic.w	r3, r3, #2
 8000c26:	6093      	str	r3, [r2, #8]
				/*HSI oscillator ON*/
				SET_BIT(RCC->CR,RCC_CR_HSION_POS);
 8000c28:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <HALL_RCC_OscConfig+0xbc>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0c      	ldr	r2, [pc, #48]	; (8000c60 <HALL_RCC_OscConfig+0xbc>)
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	6013      	str	r3, [r2, #0]
 8000c34:	e00d      	b.n	8000c52 <HALL_RCC_OscConfig+0xae>
			}
			else
			{
				CLEAR_BIT(RCC->CR,RCC_CR_HSION_POS);
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HALL_RCC_OscConfig+0xbc>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a09      	ldr	r2, [pc, #36]	; (8000c60 <HALL_RCC_OscConfig+0xbc>)
 8000c3c:	f023 0301 	bic.w	r3, r3, #1
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	e006      	b.n	8000c52 <HALL_RCC_OscConfig+0xae>
			}
		}
		else if(RCC_OSCILLATORTYPE_LSE == RCC_OscInitStruct->OscillatorType)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b04      	cmp	r3, #4
 8000c4a:	d002      	beq.n	8000c52 <HALL_RCC_OscConfig+0xae>
			else
			{

			}
		}
		else if(RCC_OSCILLATORTYPE_LSI == RCC_OscInitStruct->OscillatorType)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b08      	cmp	r3, #8
		else
		{
			/*Nothing*/
		}
	}
	return ret;
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800

08000c64 <HALL_RCC_ClockConfig>:

Std_RetType_t HALL_RCC_ClockConfig(RCC_ClkInitTypedef *RCC_ClockInitStruct)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	Std_RetType_t ret = RET_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	73fb      	strb	r3, [r7, #15]
	if(NULL == RCC_ClockInitStruct)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d102      	bne.n	8000c7c <HALL_RCC_ClockConfig+0x18>
	{
		ret = RET_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	73fb      	strb	r3, [r7, #15]
 8000c7a:	e01a      	b.n	8000cb2 <HALL_RCC_ClockConfig+0x4e>
	}
	else
	{
		MODIFY_REG(RCC->CFGR ,RCC_CFGR_HPRE_POS, RCC_ClockInitStruct->AHBClkDivider);
 8000c7c:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <HALL_RCC_ClockConfig+0x5c>)
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	f023 0204 	bic.w	r2, r3, #4
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	490d      	ldr	r1, [pc, #52]	; (8000cc0 <HALL_RCC_ClockConfig+0x5c>)
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	608b      	str	r3, [r1, #8]
		MODIFY_REG(RCC->CFGR ,RCC_CFGR_PPRE1_POS, RCC_ClockInitStruct->APB1ClkDivider);
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <HALL_RCC_ClockConfig+0x5c>)
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	f023 020a 	bic.w	r2, r3, #10
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	4909      	ldr	r1, [pc, #36]	; (8000cc0 <HALL_RCC_ClockConfig+0x5c>)
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	608b      	str	r3, [r1, #8]
		MODIFY_REG(RCC->CFGR ,RCC_CFGR_PPRE2_POS, RCC_ClockInitStruct->APB2ClkDivider);
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <HALL_RCC_ClockConfig+0x5c>)
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	f023 020d 	bic.w	r2, r3, #13
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	4904      	ldr	r1, [pc, #16]	; (8000cc0 <HALL_RCC_ClockConfig+0x5c>)
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	608b      	str	r3, [r1, #8]
	}
	return ret;
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	40023800 	.word	0x40023800

08000cc4 <syscfg_set_EXTI_port>:

#include "../../../Inc/MCAL/SYSCFG/syscfg_interface.h"


Std_RetType_t syscfg_set_EXTI_port(EXTI_LINE_t line , uint8_t port)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	460a      	mov	r2, r1
 8000cce:	71fb      	strb	r3, [r7, #7]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	71bb      	strb	r3, [r7, #6]
	Std_RetType_t ret = RET_OK;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	73fb      	strb	r3, [r7, #15]
	uint8_t l_reg_number;
	uint8_t l_bits_number;
	if((line > EXTI_LINE_15)||(port > 7 ))
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	2b0f      	cmp	r3, #15
 8000cdc:	d802      	bhi.n	8000ce4 <syscfg_set_EXTI_port+0x20>
 8000cde:	79bb      	ldrb	r3, [r7, #6]
 8000ce0:	2b07      	cmp	r3, #7
 8000ce2:	d902      	bls.n	8000cea <syscfg_set_EXTI_port+0x26>
	{
		ret = RET_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	73fb      	strb	r3, [r7, #15]
 8000ce8:	e042      	b.n	8000d70 <syscfg_set_EXTI_port+0xac>
	}
	else
	{
		l_reg_number = (line / 4) ;
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	089b      	lsrs	r3, r3, #2
 8000cee:	73bb      	strb	r3, [r7, #14]
		l_bits_number = (line % 4)*4 ;
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	f003 0303 	and.w	r3, r3, #3
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	737b      	strb	r3, [r7, #13]
		switch(l_reg_number)
 8000cfc:	7bbb      	ldrb	r3, [r7, #14]
 8000cfe:	2b03      	cmp	r3, #3
 8000d00:	d836      	bhi.n	8000d70 <syscfg_set_EXTI_port+0xac>
 8000d02:	a201      	add	r2, pc, #4	; (adr r2, 8000d08 <syscfg_set_EXTI_port+0x44>)
 8000d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d08:	08000d19 	.word	0x08000d19
 8000d0c:	08000d2f 	.word	0x08000d2f
 8000d10:	08000d45 	.word	0x08000d45
 8000d14:	08000d5b 	.word	0x08000d5b
		{
			case 0:
				SYSCFG->EXTICR0 |= (port << l_bits_number);
 8000d18:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <syscfg_set_EXTI_port+0xb8>)
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	79b9      	ldrb	r1, [r7, #6]
 8000d1e:	7b7a      	ldrb	r2, [r7, #13]
 8000d20:	fa01 f202 	lsl.w	r2, r1, r2
 8000d24:	4611      	mov	r1, r2
 8000d26:	4a15      	ldr	r2, [pc, #84]	; (8000d7c <syscfg_set_EXTI_port+0xb8>)
 8000d28:	430b      	orrs	r3, r1
 8000d2a:	6093      	str	r3, [r2, #8]
			break;
 8000d2c:	e020      	b.n	8000d70 <syscfg_set_EXTI_port+0xac>
			case 1:
				SYSCFG->EXTICR1 |= (port << l_bits_number);
 8000d2e:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <syscfg_set_EXTI_port+0xb8>)
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	79b9      	ldrb	r1, [r7, #6]
 8000d34:	7b7a      	ldrb	r2, [r7, #13]
 8000d36:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4a0f      	ldr	r2, [pc, #60]	; (8000d7c <syscfg_set_EXTI_port+0xb8>)
 8000d3e:	430b      	orrs	r3, r1
 8000d40:	60d3      	str	r3, [r2, #12]
			break;
 8000d42:	e015      	b.n	8000d70 <syscfg_set_EXTI_port+0xac>
			case 2:
				SYSCFG->EXTICR2 |= (port << l_bits_number);
 8000d44:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <syscfg_set_EXTI_port+0xb8>)
 8000d46:	691b      	ldr	r3, [r3, #16]
 8000d48:	79b9      	ldrb	r1, [r7, #6]
 8000d4a:	7b7a      	ldrb	r2, [r7, #13]
 8000d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d50:	4611      	mov	r1, r2
 8000d52:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <syscfg_set_EXTI_port+0xb8>)
 8000d54:	430b      	orrs	r3, r1
 8000d56:	6113      	str	r3, [r2, #16]
			break;
 8000d58:	e00a      	b.n	8000d70 <syscfg_set_EXTI_port+0xac>
			case 3:
				SYSCFG->EXTICR3 |= (port << l_bits_number);
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <syscfg_set_EXTI_port+0xb8>)
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	79b9      	ldrb	r1, [r7, #6]
 8000d60:	7b7a      	ldrb	r2, [r7, #13]
 8000d62:	fa01 f202 	lsl.w	r2, r1, r2
 8000d66:	4611      	mov	r1, r2
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <syscfg_set_EXTI_port+0xb8>)
 8000d6a:	430b      	orrs	r3, r1
 8000d6c:	6153      	str	r3, [r2, #20]
			break;
 8000d6e:	bf00      	nop
		}
	}
	return ret;
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	40013800 	.word	0x40013800

08000d80 <exti_b1_handler>:
PinConfig_t PC13 = { .Port = PORTC ,.Pin = PIN13,.Mode = OUTPUT ,.Type=PUSH_PULL
		, .Speed = MEDUIM , .PullType =NO_PULL
};

void exti_b1_handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
	uint8_t c =0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	71fb      	strb	r3, [r7, #7]
	c++;
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	71fb      	strb	r3, [r7, #7]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
	...

08000d9c <main>:
PinConfig_t exti_Pin = {.Port = PORTB ,.Pin = PIN1 ,.Mode=INPUT ,.Speed = MEDUIM ,.PullType = PULL_UP};

EXTI_config_t exti_b1 = {.EXTI_edge = RISING_EDGE ,.source =EXTI_1 ,.EXTI_handler = exti_b1_handler};

int main(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	SystemClock_Config();
 8000da0:	f000 f844 	bl	8000e2c <SystemClock_Config>
	Systick_init();
 8000da4:	f7ff fa98 	bl	80002d8 <Systick_init>
	RCC_GPIOC_CLK_ENABLE();
 8000da8:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <main+0x7c>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	4a1a      	ldr	r2, [pc, #104]	; (8000e18 <main+0x7c>)
 8000dae:	f043 0304 	orr.w	r3, r3, #4
 8000db2:	6313      	str	r3, [r2, #48]	; 0x30
	RCC_GPIOB_CLK_ENABLE();
 8000db4:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <main+0x7c>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	4a17      	ldr	r2, [pc, #92]	; (8000e18 <main+0x7c>)
 8000dba:	f043 0302 	orr.w	r3, r3, #2
 8000dbe:	6313      	str	r3, [r2, #48]	; 0x30
	RCC_SYSCFG_CLK_ENABLE();
 8000dc0:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <main+0x7c>)
 8000dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc4:	4a14      	ldr	r2, [pc, #80]	; (8000e18 <main+0x7c>)
 8000dc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dca:	6453      	str	r3, [r2, #68]	; 0x44
	scb_set_priority_group(GROUP_PRIORITIES_4_SUB_PRIORITIES_4);
 8000dcc:	4813      	ldr	r0, [pc, #76]	; (8000e1c <main+0x80>)
 8000dce:	f7ff fa55 	bl	800027c <scb_set_priority_group>
	GPIO_Pin_init(&PC13);
 8000dd2:	4813      	ldr	r0, [pc, #76]	; (8000e20 <main+0x84>)
 8000dd4:	f7ff fd92 	bl	80008fc <GPIO_Pin_init>


	GPIO_Pin_init(&exti_Pin); 						// configure a pin as an input
 8000dd8:	4812      	ldr	r0, [pc, #72]	; (8000e24 <main+0x88>)
 8000dda:	f7ff fd8f 	bl	80008fc <GPIO_Pin_init>

	syscfg_set_EXTI_port(EXTI_LINE_1,EXTI_PORT_B);	// configure port in SYSSFG
 8000dde:	2101      	movs	r1, #1
 8000de0:	2001      	movs	r0, #1
 8000de2:	f7ff ff6f 	bl	8000cc4 <syscfg_set_EXTI_port>
	EXTI_enable(EXTI_1);							//  enable interrupt
 8000de6:	2001      	movs	r0, #1
 8000de8:	f7ff fb3e 	bl	8000468 <EXTI_enable>
	EXTI_initialize(&exti_b1);						// configure trigger
 8000dec:	480e      	ldr	r0, [pc, #56]	; (8000e28 <main+0x8c>)
 8000dee:	f7ff fadd 	bl	80003ac <EXTI_initialize>

	nvic_set_priority(EXTI1_IRQn, 2);				// set interrupt priority via NVIC
 8000df2:	2102      	movs	r1, #2
 8000df4:	2007      	movs	r0, #7
 8000df6:	f7ff fa1f 	bl	8000238 <nvic_set_priority>
	nvic_enable(EXTI1_IRQn);						// enable interrupt via NVIC
 8000dfa:	2007      	movs	r0, #7
 8000dfc:	f7ff f9ea 	bl	80001d4 <nvic_enable>

	EXTI_set_pending_flag(&exti_b1);				// set pending flag;
 8000e00:	4809      	ldr	r0, [pc, #36]	; (8000e28 <main+0x8c>)
 8000e02:	f7ff fb49 	bl	8000498 <EXTI_set_pending_flag>


    /* Loop forever */
	while(1)
	{
		GPIO_Toggle_Pin_Value(PORTC, PIN13);
 8000e06:	210d      	movs	r1, #13
 8000e08:	2002      	movs	r0, #2
 8000e0a:	f7ff fe95 	bl	8000b38 <GPIO_Toggle_Pin_Value>
		delay_ms(100);
 8000e0e:	2064      	movs	r0, #100	; 0x64
 8000e10:	f7ff fab4 	bl	800037c <delay_ms>
		GPIO_Toggle_Pin_Value(PORTC, PIN13);
 8000e14:	e7f7      	b.n	8000e06 <main+0x6a>
 8000e16:	bf00      	nop
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	05fa0500 	.word	0x05fa0500
 8000e20:	20000018 	.word	0x20000018
 8000e24:	20000020 	.word	0x20000020
 8000e28:	20000028 	.word	0x20000028

08000e2c <SystemClock_Config>:

}


Std_RetType_t SystemClock_Config(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0
	Std_RetType_t ret = RET_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	RCC_OscInitTypedef RCC_OscInitStruct ={0};
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
	RCC_ClkInitTypedef RCC_ClkInitStruct ={0};
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e52:	2301      	movs	r3, #1
 8000e54:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.HSE_State = RCC_HSE_ON;
 8000e56:	2301      	movs	r3, #1
 8000e58:	617b      	str	r3, [r7, #20]
	ret = HALL_RCC_OscConfig(&RCC_OscInitStruct);
 8000e5a:	f107 0310 	add.w	r3, r7, #16
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fea0 	bl	8000ba4 <HALL_RCC_OscConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	RCC_ClkInitStruct.AHBClkDivider  =RCC_SYSCLK_AHB_DIV1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.APB1ClkDivider =RCC_HCLK_APB1_DIV1;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB2ClkDivider =RCC_HCLK_APB2_DIV1;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
	ret = HALL_RCC_ClockConfig(&RCC_ClkInitStruct);
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fef3 	bl	8000c64 <HALL_RCC_ClockConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	return ret;
 8000e84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3728      	adds	r7, #40	; 0x28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e90:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e92:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e94:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e98:	480c      	ldr	r0, [pc, #48]	; (8000ecc <LoopForever+0x6>)
  ldr r1, =_edata
 8000e9a:	490d      	ldr	r1, [pc, #52]	; (8000ed0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <LoopForever+0xe>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea0:	e002      	b.n	8000ea8 <LoopCopyDataInit>

08000ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea6:	3304      	adds	r3, #4

08000ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eac:	d3f9      	bcc.n	8000ea2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eb0:	4c0a      	ldr	r4, [pc, #40]	; (8000edc <LoopForever+0x16>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb4:	e001      	b.n	8000eba <LoopFillZerobss>

08000eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb8:	3204      	adds	r2, #4

08000eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ebc:	d3fb      	bcc.n	8000eb6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ebe:	f000 f811 	bl	8000ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ec2:	f7ff ff6b 	bl	8000d9c <main>

08000ec6 <LoopForever>:

LoopForever:
  b LoopForever
 8000ec6:	e7fe      	b.n	8000ec6 <LoopForever>
  ldr   r0, =_estack
 8000ec8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8000ed4:	08000f4c 	.word	0x08000f4c
  ldr r2, =_sbss
 8000ed8:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000edc:	200000ac 	.word	0x200000ac

08000ee0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC_IRQHandler>
	...

08000ee4 <__libc_init_array>:
 8000ee4:	b570      	push	{r4, r5, r6, lr}
 8000ee6:	4d0d      	ldr	r5, [pc, #52]	; (8000f1c <__libc_init_array+0x38>)
 8000ee8:	4c0d      	ldr	r4, [pc, #52]	; (8000f20 <__libc_init_array+0x3c>)
 8000eea:	1b64      	subs	r4, r4, r5
 8000eec:	10a4      	asrs	r4, r4, #2
 8000eee:	2600      	movs	r6, #0
 8000ef0:	42a6      	cmp	r6, r4
 8000ef2:	d109      	bne.n	8000f08 <__libc_init_array+0x24>
 8000ef4:	4d0b      	ldr	r5, [pc, #44]	; (8000f24 <__libc_init_array+0x40>)
 8000ef6:	4c0c      	ldr	r4, [pc, #48]	; (8000f28 <__libc_init_array+0x44>)
 8000ef8:	f000 f818 	bl	8000f2c <_init>
 8000efc:	1b64      	subs	r4, r4, r5
 8000efe:	10a4      	asrs	r4, r4, #2
 8000f00:	2600      	movs	r6, #0
 8000f02:	42a6      	cmp	r6, r4
 8000f04:	d105      	bne.n	8000f12 <__libc_init_array+0x2e>
 8000f06:	bd70      	pop	{r4, r5, r6, pc}
 8000f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f0c:	4798      	blx	r3
 8000f0e:	3601      	adds	r6, #1
 8000f10:	e7ee      	b.n	8000ef0 <__libc_init_array+0xc>
 8000f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f16:	4798      	blx	r3
 8000f18:	3601      	adds	r6, #1
 8000f1a:	e7f2      	b.n	8000f02 <__libc_init_array+0x1e>
 8000f1c:	08000f44 	.word	0x08000f44
 8000f20:	08000f44 	.word	0x08000f44
 8000f24:	08000f44 	.word	0x08000f44
 8000f28:	08000f48 	.word	0x08000f48

08000f2c <_init>:
 8000f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f2e:	bf00      	nop
 8000f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f32:	bc08      	pop	{r3}
 8000f34:	469e      	mov	lr, r3
 8000f36:	4770      	bx	lr

08000f38 <_fini>:
 8000f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f3a:	bf00      	nop
 8000f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f3e:	bc08      	pop	{r3}
 8000f40:	469e      	mov	lr, r3
 8000f42:	4770      	bx	lr
